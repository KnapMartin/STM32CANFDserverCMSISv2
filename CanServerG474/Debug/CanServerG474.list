
CanServerG474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006744  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006924  08006924  00007924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a10  08006a10  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006a10  08006a10  00007a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a18  08006a18  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a18  08006a18  00007a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a1c  08006a1c  00007a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006a20  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ac0  20000010  08006a30  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ad0  08006a30  00008ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eda7  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b71  00000000  00000000  00026de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a28  00000000  00000000  0002a958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001455  00000000  00000000  0002c380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036d6  00000000  00000000  0002d7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b9ad  00000000  00000000  00030eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b560  00000000  00000000  0004c858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157db8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007058  00000000  00000000  00157dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0015ee54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800690c 	.word	0x0800690c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800690c 	.word	0x0800690c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000514:	f000 fbc3 	bl	8000c9e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000518:	f000 f836 	bl	8000588 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800051c:	f000 f936 	bl	800078c <_ZL12MX_GPIO_Initv>
	MX_FDCAN1_Init();
 8000520:	f000 f888 	bl	8000634 <_ZL14MX_FDCAN1_Initv>
	MX_USART2_UART_Init();
 8000524:	f000 f8d2 	bl	80006cc <_ZL19MX_USART2_UART_Initv>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000528:	f003 fc38 	bl	8003d9c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of taskCanServer */
	taskCanServerHandle = osThreadNew(startTaskCanServer, NULL,
 800052c:	4a0d      	ldr	r2, [pc, #52]	@ (8000564 <main+0x54>)
 800052e:	2100      	movs	r1, #0
 8000530:	480d      	ldr	r0, [pc, #52]	@ (8000568 <main+0x58>)
 8000532:	f003 fc7d 	bl	8003e30 <osThreadNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a0c      	ldr	r2, [pc, #48]	@ (800056c <main+0x5c>)
 800053a:	6013      	str	r3, [r2, #0]
			&taskCanServer_attributes);

	/* creation of taskCanRx */
	taskCanRxHandle = osThreadNew(startTaskCanRx, NULL, &taskCanRx_attributes);
 800053c:	4a0c      	ldr	r2, [pc, #48]	@ (8000570 <main+0x60>)
 800053e:	2100      	movs	r1, #0
 8000540:	480c      	ldr	r0, [pc, #48]	@ (8000574 <main+0x64>)
 8000542:	f003 fc75 	bl	8003e30 <osThreadNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a0b      	ldr	r2, [pc, #44]	@ (8000578 <main+0x68>)
 800054a:	6013      	str	r3, [r2, #0]

	/* creation of taskCanTx */
	taskCanTxHandle = osThreadNew(startTaskCanTx, NULL, &taskCanTx_attributes);
 800054c:	4a0b      	ldr	r2, [pc, #44]	@ (800057c <main+0x6c>)
 800054e:	2100      	movs	r1, #0
 8000550:	480b      	ldr	r0, [pc, #44]	@ (8000580 <main+0x70>)
 8000552:	f003 fc6d 	bl	8003e30 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a0a      	ldr	r2, [pc, #40]	@ (8000584 <main+0x74>)
 800055a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800055c:	f003 fc42 	bl	8003de4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <main+0x50>
 8000564:	08006964 	.word	0x08006964
 8000568:	08000895 	.word	0x08000895
 800056c:	20000124 	.word	0x20000124
 8000570:	08006988 	.word	0x08006988
 8000574:	080008a5 	.word	0x080008a5
 8000578:	20000128 	.word	0x20000128
 800057c:	080069ac 	.word	0x080069ac
 8000580:	080008b5 	.word	0x080008b5
 8000584:	2000012c 	.word	0x2000012c

08000588 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	@ 0x50
 800058c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800058e:	f107 0318 	add.w	r3, r7, #24
 8000592:	2238      	movs	r2, #56	@ 0x38
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f006 f97e 	bl	8006898 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f001 f996 	bl	80018dc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ba:	2340      	movs	r3, #64	@ 0x40
 80005bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005c6:	2304      	movs	r3, #4
 80005c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80005ca:	2355      	movs	r3, #85	@ 0x55
 80005cc:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fa30 	bl	8001a44 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	bf14      	ite	ne
 80005ea:	2301      	movne	r3, #1
 80005ec:	2300      	moveq	r3, #0
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <_Z18SystemClock_Configv+0x70>
		Error_Handler();
 80005f4:	f000 f978 	bl	80008e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2303      	movs	r3, #3
 80005fe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2104      	movs	r1, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fd29 	bl	8002068 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	bf14      	ite	ne
 800061c:	2301      	movne	r3, #1
 800061e:	2300      	moveq	r3, #0
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <_Z18SystemClock_Configv+0xa2>
		Error_Handler();
 8000626:	f000 f95f 	bl	80008e8 <Error_Handler>
	}
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	@ 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <_ZL14MX_FDCAN1_Initv>:
/**
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 8000638:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 800063a:	4a23      	ldr	r2, [pc, #140]	@ (80006c8 <_ZL14MX_FDCAN1_Initv+0x94>)
 800063c:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 800063e:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000640:	2201      	movs	r2, #1
 8000642:	605a      	str	r2, [r3, #4]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000644:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800064a:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8000650:	4b1c      	ldr	r3, [pc, #112]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000652:	2200      	movs	r2, #0
 8000654:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000656:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000658:	2200      	movs	r2, #0
 800065a:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 800065c:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 800065e:	2200      	movs	r2, #0
 8000660:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 283;
 8000662:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000664:	f240 121b 	movw	r2, #283	@ 0x11b
 8000668:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 800066a:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 800066c:	2201      	movs	r2, #1
 800066e:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 1;
 8000670:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000672:	2201      	movs	r2, #1
 8000674:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 1;
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000678:	2201      	movs	r2, #1
 800067a:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 800067c:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 800067e:	2201      	movs	r2, #1
 8000680:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000684:	2201      	movs	r2, #1
 8000686:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 8000688:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 800068a:	2201      	movs	r2, #1
 800068c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 800068e:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000690:	2201      	movs	r2, #1
 8000692:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.StdFiltersNbr = 0;
 8000694:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000696:	2200      	movs	r2, #0
 8000698:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.ExtFiltersNbr = 0;
 800069a:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 800069c:	2200      	movs	r2, #0
 800069e:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006a0:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 80006a6:	4807      	ldr	r0, [pc, #28]	@ (80006c4 <_ZL14MX_FDCAN1_Initv+0x90>)
 80006a8:	f000 fc10 	bl	8000ecc <HAL_FDCAN_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	bf14      	ite	ne
 80006b2:	2301      	movne	r3, #1
 80006b4:	2300      	moveq	r3, #0
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <_ZL14MX_FDCAN1_Initv+0x8c>
		Error_Handler();
 80006bc:	f000 f914 	bl	80008e8 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */

	/* USER CODE END FDCAN1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000002c 	.word	0x2000002c
 80006c8:	40006400 	.word	0x40006400

080006cc <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000784 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80006d2:	4a2d      	ldr	r2, [pc, #180]	@ (8000788 <_ZL19MX_USART2_UART_Initv+0xbc>)
 80006d4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000784 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b29      	ldr	r3, [pc, #164]	@ (8000784 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b27      	ldr	r3, [pc, #156]	@ (8000784 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b26      	ldr	r3, [pc, #152]	@ (8000784 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000710:	2200      	movs	r2, #0
 8000712:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000714:	481b      	ldr	r0, [pc, #108]	@ (8000784 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000716:	f002 fc8f 	bl	8003038 <HAL_UART_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	bf14      	ite	ne
 8000720:	2301      	movne	r3, #1
 8000722:	2300      	moveq	r3, #0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <_ZL19MX_USART2_UART_Initv+0x62>
		Error_Handler();
 800072a:	f000 f8dd 	bl	80008e8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 800072e:	2100      	movs	r1, #0
 8000730:	4814      	ldr	r0, [pc, #80]	@ (8000784 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000732:	f003 fa25 	bl	8003b80 <HAL_UARTEx_SetTxFifoThreshold>
 8000736:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000738:	2b00      	cmp	r3, #0
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <_ZL19MX_USART2_UART_Initv+0x7e>
		Error_Handler();
 8000746:	f000 f8cf 	bl	80008e8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 800074a:	2100      	movs	r1, #0
 800074c:	480d      	ldr	r0, [pc, #52]	@ (8000784 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800074e:	f003 fa55 	bl	8003bfc <HAL_UARTEx_SetRxFifoThreshold>
 8000752:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000754:	2b00      	cmp	r3, #0
 8000756:	bf14      	ite	ne
 8000758:	2301      	movne	r3, #1
 800075a:	2300      	moveq	r3, #0
 800075c:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <_ZL19MX_USART2_UART_Initv+0x9a>
		Error_Handler();
 8000762:	f000 f8c1 	bl	80008e8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000766:	4807      	ldr	r0, [pc, #28]	@ (8000784 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000768:	f003 f9d1 	bl	8003b0e <HAL_UARTEx_DisableFifoMode>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	bf14      	ite	ne
 8000772:	2301      	movne	r3, #1
 8000774:	2300      	moveq	r3, #0
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <_ZL19MX_USART2_UART_Initv+0xb4>
		Error_Handler();
 800077c:	f000 f8b4 	bl	80008e8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000090 	.word	0x20000090
 8000788:	40004400 	.word	0x40004400

0800078c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000860 <_ZL12MX_GPIO_Initv+0xd4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a2e      	ldr	r2, [pc, #184]	@ (8000860 <_ZL12MX_GPIO_Initv+0xd4>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000860 <_ZL12MX_GPIO_Initv+0xd4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80007ba:	4b29      	ldr	r3, [pc, #164]	@ (8000860 <_ZL12MX_GPIO_Initv+0xd4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a28      	ldr	r2, [pc, #160]	@ (8000860 <_ZL12MX_GPIO_Initv+0xd4>)
 80007c0:	f043 0320 	orr.w	r3, r3, #32
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b26      	ldr	r3, [pc, #152]	@ (8000860 <_ZL12MX_GPIO_Initv+0xd4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0320 	and.w	r3, r3, #32
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b23      	ldr	r3, [pc, #140]	@ (8000860 <_ZL12MX_GPIO_Initv+0xd4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	4a22      	ldr	r2, [pc, #136]	@ (8000860 <_ZL12MX_GPIO_Initv+0xd4>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007de:	4b20      	ldr	r3, [pc, #128]	@ (8000860 <_ZL12MX_GPIO_Initv+0xd4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <_ZL12MX_GPIO_Initv+0xd4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000860 <_ZL12MX_GPIO_Initv+0xd4>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <_ZL12MX_GPIO_Initv+0xd4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2120      	movs	r1, #32
 8000806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080a:	f001 f82b 	bl	8001864 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800080e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000812:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000814:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000818:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	480f      	ldr	r0, [pc, #60]	@ (8000864 <_ZL12MX_GPIO_Initv+0xd8>)
 8000826:	f000 fe9b 	bl	8001560 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800082a:	2320      	movs	r3, #32
 800082c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000844:	f000 fe8c 	bl	8001560 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2105      	movs	r1, #5
 800084c:	2028      	movs	r0, #40	@ 0x28
 800084e:	f000 fb15 	bl	8000e7c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000852:	2028      	movs	r0, #40	@ 0x28
 8000854:	f000 fb2c 	bl	8000eb0 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	@ 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	48000800 	.word	0x48000800

08000868 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]

}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]

}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <_Z18startTaskCanServerPv>:
 * @brief  Function implementing the taskCanServer thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTaskCanServer */
void startTaskCanServer(void *argument) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800089c:	2001      	movs	r0, #1
 800089e:	f003 fb59 	bl	8003f54 <osDelay>
 80008a2:	e7fb      	b.n	800089c <_Z18startTaskCanServerPv+0x8>

080008a4 <_Z14startTaskCanRxPv>:
 * @brief Function implementing the taskCanRx thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTaskCanRx */
void startTaskCanRx(void *argument) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startTaskCanRx */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f003 fb51 	bl	8003f54 <osDelay>
 80008b2:	e7fb      	b.n	80008ac <_Z14startTaskCanRxPv+0x8>

080008b4 <_Z14startTaskCanTxPv>:
 * @brief Function implementing the taskCanTx thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTaskCanTx */
void startTaskCanTx(void *argument) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startTaskCanTx */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f003 fb49 	bl	8003f54 <osDelay>
 80008c2:	e7fb      	b.n	80008bc <_Z14startTaskCanTxPv+0x8>

080008c4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a04      	ldr	r2, [pc, #16]	@ (80008e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d101      	bne.n	80008da <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80008d6:	f000 f9fb 	bl	8000cd0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40001000 	.word	0x40001000

080008e8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <Error_Handler+0x8>

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_MspInit+0x50>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fe:	4a11      	ldr	r2, [pc, #68]	@ (8000944 <HAL_MspInit+0x50>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6613      	str	r3, [r2, #96]	@ 0x60
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <HAL_MspInit+0x50>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <HAL_MspInit+0x50>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000916:	4a0b      	ldr	r2, [pc, #44]	@ (8000944 <HAL_MspInit+0x50>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091c:	6593      	str	r3, [r2, #88]	@ 0x58
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HAL_MspInit+0x50>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	210f      	movs	r1, #15
 800092e:	f06f 0001 	mvn.w	r0, #1
 8000932:	f000 faa3 	bl	8000e7c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000936:	f001 f875 	bl	8001a24 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b09e      	sub	sp, #120	@ 0x78
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	2254      	movs	r2, #84	@ 0x54
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f005 ff95 	bl	8006898 <memset>
  if(hfdcan->Instance==FDCAN1)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a28      	ldr	r2, [pc, #160]	@ (8000a14 <HAL_FDCAN_MspInit+0xcc>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d149      	bne.n	8000a0c <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800097e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000982:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	4618      	mov	r0, r3
 800098a:	f001 fdbb 	bl	8002504 <HAL_RCCEx_PeriphCLKConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000994:	f7ff ffa8 	bl	80008e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000998:	4b1f      	ldr	r3, [pc, #124]	@ (8000a18 <HAL_FDCAN_MspInit+0xd0>)
 800099a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099c:	4a1e      	ldr	r2, [pc, #120]	@ (8000a18 <HAL_FDCAN_MspInit+0xd0>)
 800099e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80009a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <HAL_FDCAN_MspInit+0xd0>)
 80009a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <HAL_FDCAN_MspInit+0xd0>)
 80009b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b4:	4a18      	ldr	r2, [pc, #96]	@ (8000a18 <HAL_FDCAN_MspInit+0xd0>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009bc:	4b16      	ldr	r3, [pc, #88]	@ (8000a18 <HAL_FDCAN_MspInit+0xd0>)
 80009be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009c8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80009da:	2309      	movs	r3, #9
 80009dc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e8:	f000 fdba 	bl	8001560 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2105      	movs	r1, #5
 80009f0:	2015      	movs	r0, #21
 80009f2:	f000 fa43 	bl	8000e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80009f6:	2015      	movs	r0, #21
 80009f8:	f000 fa5a 	bl	8000eb0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2105      	movs	r1, #5
 8000a00:	2016      	movs	r0, #22
 8000a02:	f000 fa3b 	bl	8000e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000a06:	2016      	movs	r0, #22
 8000a08:	f000 fa52 	bl	8000eb0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000a0c:	bf00      	nop
 8000a0e:	3778      	adds	r7, #120	@ 0x78
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40006400 	.word	0x40006400
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b09e      	sub	sp, #120	@ 0x78
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	2254      	movs	r2, #84	@ 0x54
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f005 ff2b 	bl	8006898 <memset>
  if(huart->Instance==USART2)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac4 <HAL_UART_MspInit+0xa8>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d136      	bne.n	8000aba <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fd53 	bl	8002504 <HAL_RCCEx_PeriphCLKConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a64:	f7ff ff40 	bl	80008e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a68:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <HAL_UART_MspInit+0xac>)
 8000a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6c:	4a16      	ldr	r2, [pc, #88]	@ (8000ac8 <HAL_UART_MspInit+0xac>)
 8000a6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a72:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a74:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <HAL_UART_MspInit+0xac>)
 8000a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <HAL_UART_MspInit+0xac>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a84:	4a10      	ldr	r2, [pc, #64]	@ (8000ac8 <HAL_UART_MspInit+0xac>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <HAL_UART_MspInit+0xac>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab6:	f000 fd53 	bl	8001560 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000aba:	bf00      	nop
 8000abc:	3778      	adds	r7, #120	@ 0x78
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	@ 0x30
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000adc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b90 <HAL_InitTick+0xc4>)
 8000ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8000b90 <HAL_InitTick+0xc4>)
 8000ae2:	f043 0310 	orr.w	r3, r3, #16
 8000ae6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ae8:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <HAL_InitTick+0xc4>)
 8000aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aec:	f003 0310 	and.w	r3, r3, #16
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af4:	f107 020c 	add.w	r2, r7, #12
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	4611      	mov	r1, r2
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 fc88 	bl	8002414 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b04:	f001 fc5a 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 8000b08:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b0c:	4a21      	ldr	r2, [pc, #132]	@ (8000b94 <HAL_InitTick+0xc8>)
 8000b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b12:	0c9b      	lsrs	r3, r3, #18
 8000b14:	3b01      	subs	r3, #1
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b18:	4b1f      	ldr	r3, [pc, #124]	@ (8000b98 <HAL_InitTick+0xcc>)
 8000b1a:	4a20      	ldr	r2, [pc, #128]	@ (8000b9c <HAL_InitTick+0xd0>)
 8000b1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <HAL_InitTick+0xcc>)
 8000b20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b24:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b26:	4a1c      	ldr	r2, [pc, #112]	@ (8000b98 <HAL_InitTick+0xcc>)
 8000b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <HAL_InitTick+0xcc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b32:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <HAL_InitTick+0xcc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000b38:	4817      	ldr	r0, [pc, #92]	@ (8000b98 <HAL_InitTick+0xcc>)
 8000b3a:	f001 ff31 	bl	80029a0 <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d11b      	bne.n	8000b84 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b4c:	4812      	ldr	r0, [pc, #72]	@ (8000b98 <HAL_InitTick+0xcc>)
 8000b4e:	f001 ff89 	bl	8002a64 <HAL_TIM_Base_Start_IT>
 8000b52:	4603      	mov	r3, r0
 8000b54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d111      	bne.n	8000b84 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b60:	2036      	movs	r0, #54	@ 0x36
 8000b62:	f000 f9a5 	bl	8000eb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d808      	bhi.n	8000b7e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	2036      	movs	r0, #54	@ 0x36
 8000b72:	f000 f983 	bl	8000e7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <HAL_InitTick+0xd4>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	e002      	b.n	8000b84 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3730      	adds	r7, #48	@ 0x30
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40021000 	.word	0x40021000
 8000b94:	431bde83 	.word	0x431bde83
 8000b98:	20000130 	.word	0x20000130
 8000b9c:	40001000 	.word	0x40001000
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <NMI_Handler+0x4>

08000bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000be0:	4802      	ldr	r0, [pc, #8]	@ (8000bec <FDCAN1_IT0_IRQHandler+0x10>)
 8000be2:	f000 facd 	bl	8001180 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000002c 	.word	0x2000002c

08000bf0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000bf4:	4802      	ldr	r0, [pc, #8]	@ (8000c00 <FDCAN1_IT1_IRQHandler+0x10>)
 8000bf6:	f000 fac3 	bl	8001180 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2000002c 	.word	0x2000002c

08000c04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c08:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c0c:	f000 fe42 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c18:	4802      	ldr	r0, [pc, #8]	@ (8000c24 <TIM6_DAC_IRQHandler+0x10>)
 8000c1a:	f001 ff9b 	bl	8002b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000130 	.word	0x20000130

08000c28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c4c:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c50:	f7ff ffea 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	@ (8000c8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	@ (8000c90 <LoopForever+0xe>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c98 <LoopForever+0x16>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f005 fe15 	bl	80068a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c7e:	f7ff fc47 	bl	8000510 <main>

08000c82 <LoopForever>:

LoopForever:
    b LoopForever
 8000c82:	e7fe      	b.n	8000c82 <LoopForever>
  ldr   r0, =_estack
 8000c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c90:	08006a20 	.word	0x08006a20
  ldr r2, =_sbss
 8000c94:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c98:	20001ad0 	.word	0x20001ad0

08000c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC1_2_IRQHandler>

08000c9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f8dc 	bl	8000e66 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cae:	200f      	movs	r0, #15
 8000cb0:	f7ff ff0c 	bl	8000acc <HAL_InitTick>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d002      	beq.n	8000cc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	e001      	b.n	8000cc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc0:	f7ff fe18 	bl	80008f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]

}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <HAL_IncTick+0x1c>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <HAL_IncTick+0x20>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a03      	ldr	r2, [pc, #12]	@ (8000cec <HAL_IncTick+0x1c>)
 8000ce0:	6013      	str	r3, [r2, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	2000017c 	.word	0x2000017c
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	2000017c 	.word	0x2000017c

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0b      	blt.n	8000d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4907      	ldr	r1, [pc, #28]	@ (8000da8 <__NVIC_EnableIRQ+0x38>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	@ (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	@ (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	@ 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	@ 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ff4c 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8a:	f7ff ff63 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000e8e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	68b9      	ldr	r1, [r7, #8]
 8000e94:	6978      	ldr	r0, [r7, #20]
 8000e96:	f7ff ffb3 	bl	8000e00 <NVIC_EncodePriority>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff82 	bl	8000dac <__NVIC_SetPriority>
}
 8000ea8:	bf00      	nop
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff56 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e147      	b.n	800116e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d106      	bne.n	8000ef8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fd28 	bl	8000948 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	699a      	ldr	r2, [r3, #24]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0210 	bic.w	r2, r2, #16
 8000f06:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f08:	f7ff fef4 	bl	8000cf4 <HAL_GetTick>
 8000f0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f0e:	e012      	b.n	8000f36 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f10:	f7ff fef0 	bl	8000cf4 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b0a      	cmp	r3, #10
 8000f1c:	d90b      	bls.n	8000f36 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f22:	f043 0201 	orr.w	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e11b      	b.n	800116e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d0e5      	beq.n	8000f10 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	699a      	ldr	r2, [r3, #24]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0201 	orr.w	r2, r2, #1
 8000f52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f54:	f7ff fece 	bl	8000cf4 <HAL_GetTick>
 8000f58:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f5a:	e012      	b.n	8000f82 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f5c:	f7ff feca 	bl	8000cf4 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b0a      	cmp	r3, #10
 8000f68:	d90b      	bls.n	8000f82 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6e:	f043 0201 	orr.w	r2, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2203      	movs	r2, #3
 8000f7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e0f5      	b.n	800116e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0e5      	beq.n	8000f5c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	699a      	ldr	r2, [r3, #24]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0202 	orr.w	r2, r2, #2
 8000f9e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a74      	ldr	r2, [pc, #464]	@ (8001178 <HAL_FDCAN_Init+0x2ac>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d103      	bne.n	8000fb2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000faa:	4a74      	ldr	r2, [pc, #464]	@ (800117c <HAL_FDCAN_Init+0x2b0>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7c1b      	ldrb	r3, [r3, #16]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d108      	bne.n	8000fcc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	699a      	ldr	r2, [r3, #24]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fc8:	619a      	str	r2, [r3, #24]
 8000fca:	e007      	b.n	8000fdc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	699a      	ldr	r2, [r3, #24]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fda:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7c5b      	ldrb	r3, [r3, #17]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d108      	bne.n	8000ff6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	699a      	ldr	r2, [r3, #24]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000ff2:	619a      	str	r2, [r3, #24]
 8000ff4:	e007      	b.n	8001006 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	699a      	ldr	r2, [r3, #24]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001004:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7c9b      	ldrb	r3, [r3, #18]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d108      	bne.n	8001020 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	699a      	ldr	r2, [r3, #24]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800101c:	619a      	str	r2, [r3, #24]
 800101e:	e007      	b.n	8001030 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800102e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	430a      	orrs	r2, r1
 8001044:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	699a      	ldr	r2, [r3, #24]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001054:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 0210 	bic.w	r2, r2, #16
 8001064:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d108      	bne.n	8001080 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	699a      	ldr	r2, [r3, #24]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f042 0204 	orr.w	r2, r2, #4
 800107c:	619a      	str	r2, [r3, #24]
 800107e:	e02c      	b.n	80010da <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d028      	beq.n	80010da <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d01c      	beq.n	80010ca <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	699a      	ldr	r2, [r3, #24]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800109e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	691a      	ldr	r2, [r3, #16]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0210 	orr.w	r2, r2, #16
 80010ae:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d110      	bne.n	80010da <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	699a      	ldr	r2, [r3, #24]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0220 	orr.w	r2, r2, #32
 80010c6:	619a      	str	r2, [r3, #24]
 80010c8:	e007      	b.n	80010da <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	699a      	ldr	r2, [r3, #24]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0220 	orr.w	r2, r2, #32
 80010d8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	3b01      	subs	r3, #1
 80010e0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010ea:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010f2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001102:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001104:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800110e:	d115      	bne.n	800113c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001114:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800111a:	3b01      	subs	r3, #1
 800111c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800111e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001124:	3b01      	subs	r3, #1
 8001126:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001128:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001130:	3b01      	subs	r3, #1
 8001132:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001138:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800113a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	430a      	orrs	r2, r1
 800114e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f998 	bl	8001488 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40006400 	.word	0x40006400
 800117c:	40006500 	.word	0x40006500

08001180 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	@ 0x30
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800118e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800119a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800119c:	4013      	ands	r3, r2
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011b4:	4013      	ands	r3, r2
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011cc:	4013      	ands	r3, r2
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011d6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80011da:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011e2:	6a3a      	ldr	r2, [r7, #32]
 80011e4:	4013      	ands	r3, r2
 80011e6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011ee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80011f2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001206:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800120e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00b      	beq.n	8001232 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2240      	movs	r2, #64	@ 0x40
 800122a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f90b 	bl	8001448 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001238:	2b00      	cmp	r3, #0
 800123a:	d019      	beq.n	8001270 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001242:	2b00      	cmp	r3, #0
 8001244:	d014      	beq.n	8001270 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800124e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001266:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001268:	6939      	ldr	r1, [r7, #16]
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f8cd 	bl	800140a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001272:	2b00      	cmp	r3, #0
 8001274:	d007      	beq.n	8001286 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800127c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800127e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 f8a2 	bl	80013ca <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001288:	2b00      	cmp	r3, #0
 800128a:	d007      	beq.n	800129c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001292:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001294:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fae6 	bl	8000868 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800129c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80012aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff fae6 	bl	800087e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00c      	beq.n	80012d6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012ce:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f885 	bl	80013e0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d018      	beq.n	8001312 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d013      	beq.n	8001312 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80012f2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	4013      	ands	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2280      	movs	r2, #128	@ 0x80
 8001308:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800130a:	68f9      	ldr	r1, [r7, #12]
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f871 	bl	80013f4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00c      	beq.n	8001336 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800132e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f875 	bl	8001420 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00c      	beq.n	800135a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d007      	beq.n	800135a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001352:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 f86d 	bl	8001434 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00f      	beq.n	8001384 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00a      	beq.n	8001384 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001376:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d007      	beq.n	800139a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001392:	69f9      	ldr	r1, [r7, #28]
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f86b 	bl	8001470 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800139a:	6a3b      	ldr	r3, [r7, #32]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d009      	beq.n	80013b4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6a3a      	ldr	r2, [r7, #32]
 80013a6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f84d 	bl	800145c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	@ 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001490:	4b30      	ldr	r3, [pc, #192]	@ (8001554 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001492:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a2f      	ldr	r2, [pc, #188]	@ (8001558 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d103      	bne.n	80014a6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80014a4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a2c      	ldr	r2, [pc, #176]	@ (800155c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d103      	bne.n	80014b8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80014b6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014c6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ce:	041a      	lsls	r2, r3, #16
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ec:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014f4:	061a      	lsls	r2, r3, #24
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	e005      	b.n	800153a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3304      	adds	r3, #4
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	429a      	cmp	r2, r3
 8001544:	d3f3      	bcc.n	800152e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001546:	bf00      	nop
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	4000a400 	.word	0x4000a400
 8001558:	40006800 	.word	0x40006800
 800155c:	40006c00 	.word	0x40006c00

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800156e:	e15a      	b.n	8001826 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2101      	movs	r1, #1
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	4013      	ands	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 814c 	beq.w	8001820 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d005      	beq.n	80015a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800159c:	2b02      	cmp	r3, #2
 800159e:	d130      	bne.n	8001602 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015d6:	2201      	movs	r2, #1
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	f003 0201 	and.w	r2, r3, #1
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b03      	cmp	r3, #3
 800160c:	d017      	beq.n	800163e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d123      	bne.n	8001692 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	220f      	movs	r2, #15
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	08da      	lsrs	r2, r3, #3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3208      	adds	r2, #8
 800168c:	6939      	ldr	r1, [r7, #16]
 800168e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	2203      	movs	r2, #3
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0203 	and.w	r2, r3, #3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 80a6 	beq.w	8001820 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d4:	4b5b      	ldr	r3, [pc, #364]	@ (8001844 <HAL_GPIO_Init+0x2e4>)
 80016d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d8:	4a5a      	ldr	r2, [pc, #360]	@ (8001844 <HAL_GPIO_Init+0x2e4>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6613      	str	r3, [r2, #96]	@ 0x60
 80016e0:	4b58      	ldr	r3, [pc, #352]	@ (8001844 <HAL_GPIO_Init+0x2e4>)
 80016e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ec:	4a56      	ldr	r2, [pc, #344]	@ (8001848 <HAL_GPIO_Init+0x2e8>)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	220f      	movs	r2, #15
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001716:	d01f      	beq.n	8001758 <HAL_GPIO_Init+0x1f8>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a4c      	ldr	r2, [pc, #304]	@ (800184c <HAL_GPIO_Init+0x2ec>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d019      	beq.n	8001754 <HAL_GPIO_Init+0x1f4>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a4b      	ldr	r2, [pc, #300]	@ (8001850 <HAL_GPIO_Init+0x2f0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d013      	beq.n	8001750 <HAL_GPIO_Init+0x1f0>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a4a      	ldr	r2, [pc, #296]	@ (8001854 <HAL_GPIO_Init+0x2f4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d00d      	beq.n	800174c <HAL_GPIO_Init+0x1ec>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a49      	ldr	r2, [pc, #292]	@ (8001858 <HAL_GPIO_Init+0x2f8>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d007      	beq.n	8001748 <HAL_GPIO_Init+0x1e8>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a48      	ldr	r2, [pc, #288]	@ (800185c <HAL_GPIO_Init+0x2fc>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d101      	bne.n	8001744 <HAL_GPIO_Init+0x1e4>
 8001740:	2305      	movs	r3, #5
 8001742:	e00a      	b.n	800175a <HAL_GPIO_Init+0x1fa>
 8001744:	2306      	movs	r3, #6
 8001746:	e008      	b.n	800175a <HAL_GPIO_Init+0x1fa>
 8001748:	2304      	movs	r3, #4
 800174a:	e006      	b.n	800175a <HAL_GPIO_Init+0x1fa>
 800174c:	2303      	movs	r3, #3
 800174e:	e004      	b.n	800175a <HAL_GPIO_Init+0x1fa>
 8001750:	2302      	movs	r3, #2
 8001752:	e002      	b.n	800175a <HAL_GPIO_Init+0x1fa>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <HAL_GPIO_Init+0x1fa>
 8001758:	2300      	movs	r3, #0
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	f002 0203 	and.w	r2, r2, #3
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	4093      	lsls	r3, r2
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800176a:	4937      	ldr	r1, [pc, #220]	@ (8001848 <HAL_GPIO_Init+0x2e8>)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3302      	adds	r3, #2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001778:	4b39      	ldr	r3, [pc, #228]	@ (8001860 <HAL_GPIO_Init+0x300>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800179c:	4a30      	ldr	r2, [pc, #192]	@ (8001860 <HAL_GPIO_Init+0x300>)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001860 <HAL_GPIO_Init+0x300>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017c6:	4a26      	ldr	r2, [pc, #152]	@ (8001860 <HAL_GPIO_Init+0x300>)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80017cc:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <HAL_GPIO_Init+0x300>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001860 <HAL_GPIO_Init+0x300>)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <HAL_GPIO_Init+0x300>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800181a:	4a11      	ldr	r2, [pc, #68]	@ (8001860 <HAL_GPIO_Init+0x300>)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	3301      	adds	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	f47f ae9d 	bne.w	8001570 <HAL_GPIO_Init+0x10>
  }
}
 8001836:	bf00      	nop
 8001838:	bf00      	nop
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40021000 	.word	0x40021000
 8001848:	40010000 	.word	0x40010000
 800184c:	48000400 	.word	0x48000400
 8001850:	48000800 	.word	0x48000800
 8001854:	48000c00 	.word	0x48000c00
 8001858:	48001000 	.word	0x48001000
 800185c:	48001400 	.word	0x48001400
 8001860:	40010400 	.word	0x40010400

08001864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
 8001870:	4613      	mov	r3, r2
 8001872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001874:	787b      	ldrb	r3, [r7, #1]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001880:	e002      	b.n	8001888 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001882:	887a      	ldrh	r2, [r7, #2]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800189e:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018a0:	695a      	ldr	r2, [r3, #20]
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018aa:	4a05      	ldr	r2, [pc, #20]	@ (80018c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 f806 	bl	80018c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40010400 	.word	0x40010400

080018c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d141      	bne.n	800196e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018f6:	d131      	bne.n	800195c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f8:	4b47      	ldr	r3, [pc, #284]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018fe:	4a46      	ldr	r2, [pc, #280]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001904:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001908:	4b43      	ldr	r3, [pc, #268]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001910:	4a41      	ldr	r2, [pc, #260]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001912:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001916:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001918:	4b40      	ldr	r3, [pc, #256]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2232      	movs	r2, #50	@ 0x32
 800191e:	fb02 f303 	mul.w	r3, r2, r3
 8001922:	4a3f      	ldr	r2, [pc, #252]	@ (8001a20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001924:	fba2 2303 	umull	r2, r3, r2, r3
 8001928:	0c9b      	lsrs	r3, r3, #18
 800192a:	3301      	adds	r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800192e:	e002      	b.n	8001936 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	3b01      	subs	r3, #1
 8001934:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001936:	4b38      	ldr	r3, [pc, #224]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800193e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001942:	d102      	bne.n	800194a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f2      	bne.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800194a:	4b33      	ldr	r3, [pc, #204]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001956:	d158      	bne.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e057      	b.n	8001a0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800195c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800195e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001962:	4a2d      	ldr	r2, [pc, #180]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001968:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800196c:	e04d      	b.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001974:	d141      	bne.n	80019fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001976:	4b28      	ldr	r3, [pc, #160]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800197e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001982:	d131      	bne.n	80019e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001984:	4b24      	ldr	r3, [pc, #144]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800198a:	4a23      	ldr	r2, [pc, #140]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001990:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001994:	4b20      	ldr	r3, [pc, #128]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800199c:	4a1e      	ldr	r2, [pc, #120]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2232      	movs	r2, #50	@ 0x32
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001a20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019b0:	fba2 2303 	umull	r2, r3, r2, r3
 80019b4:	0c9b      	lsrs	r3, r3, #18
 80019b6:	3301      	adds	r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ba:	e002      	b.n	80019c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3b01      	subs	r3, #1
 80019c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019c2:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ce:	d102      	bne.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f2      	bne.n	80019bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019d6:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019e2:	d112      	bne.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e011      	b.n	8001a0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80019f8:	e007      	b.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019fa:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a02:	4a05      	ldr	r2, [pc, #20]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	40007000 	.word	0x40007000
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	431bde83 	.word	0x431bde83

08001a24 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4a04      	ldr	r2, [pc, #16]	@ (8001a40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a32:	6093      	str	r3, [r2, #8]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40007000 	.word	0x40007000

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e2fe      	b.n	8002054 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b97      	ldr	r3, [pc, #604]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b94      	ldr	r3, [pc, #592]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x3e>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x44>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d10b      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	4b8d      	ldr	r3, [pc, #564]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d05b      	beq.n	8001b4c <HAL_RCC_OscConfig+0x108>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d157      	bne.n	8001b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e2d9      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa8:	d106      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x74>
 8001aaa:	4b85      	ldr	r3, [pc, #532]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a84      	ldr	r2, [pc, #528]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e01d      	b.n	8001af4 <HAL_RCC_OscConfig+0xb0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x98>
 8001ac2:	4b7f      	ldr	r3, [pc, #508]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7e      	ldr	r2, [pc, #504]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b7c      	ldr	r3, [pc, #496]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a7b      	ldr	r2, [pc, #492]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e00b      	b.n	8001af4 <HAL_RCC_OscConfig+0xb0>
 8001adc:	4b78      	ldr	r3, [pc, #480]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a77      	ldr	r2, [pc, #476]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b75      	ldr	r3, [pc, #468]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a74      	ldr	r2, [pc, #464]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff f8fa 	bl	8000cf4 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff f8f6 	bl	8000cf4 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	@ 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e29e      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b16:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0xc0>
 8001b22:	e014      	b.n	8001b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff f8e6 	bl	8000cf4 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f8e2 	bl	8000cf4 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	@ 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e28a      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b3e:	4b60      	ldr	r3, [pc, #384]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0xe8>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d075      	beq.n	8001c46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5a:	4b59      	ldr	r3, [pc, #356]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b64:	4b56      	ldr	r3, [pc, #344]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2b0c      	cmp	r3, #12
 8001b72:	d102      	bne.n	8001b7a <HAL_RCC_OscConfig+0x136>
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d002      	beq.n	8001b80 <HAL_RCC_OscConfig+0x13c>
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d11f      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b80:	4b4f      	ldr	r3, [pc, #316]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_OscConfig+0x154>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e25d      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b98:	4b49      	ldr	r3, [pc, #292]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	061b      	lsls	r3, r3, #24
 8001ba6:	4946      	ldr	r1, [pc, #280]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bac:	4b45      	ldr	r3, [pc, #276]	@ (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe ff8b 	bl	8000acc <HAL_InitTick>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d043      	beq.n	8001c44 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e249      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d023      	beq.n	8001c10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f88e 	bl	8000cf4 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bdc:	f7ff f88a 	bl	8000cf4 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e232      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bee:	4b34      	ldr	r3, [pc, #208]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfa:	4b31      	ldr	r3, [pc, #196]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	061b      	lsls	r3, r3, #24
 8001c08:	492d      	ldr	r1, [pc, #180]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	604b      	str	r3, [r1, #4]
 8001c0e:	e01a      	b.n	8001c46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c10:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a2a      	ldr	r2, [pc, #168]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001c16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff f86a 	bl	8000cf4 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c24:	f7ff f866 	bl	8000cf4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e20e      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c36:	4b22      	ldr	r3, [pc, #136]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x1e0>
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d041      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d01c      	beq.n	8001c94 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5a:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c60:	4a17      	ldr	r2, [pc, #92]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6a:	f7ff f843 	bl	8000cf4 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c72:	f7ff f83f 	bl	8000cf4 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e1e7      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c84:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0ef      	beq.n	8001c72 <HAL_RCC_OscConfig+0x22e>
 8001c92:	e020      	b.n	8001cd6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c94:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c9a:	4a09      	ldr	r2, [pc, #36]	@ (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f826 	bl	8000cf4 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001caa:	e00d      	b.n	8001cc8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cac:	f7ff f822 	bl	8000cf4 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d906      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1ca      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cc8:	4b8c      	ldr	r3, [pc, #560]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1ea      	bne.n	8001cac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 80a6 	beq.w	8001e30 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ce8:	4b84      	ldr	r3, [pc, #528]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x2b4>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x2b6>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00d      	beq.n	8001d1a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4b7f      	ldr	r3, [pc, #508]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d02:	4a7e      	ldr	r2, [pc, #504]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d0a:	4b7c      	ldr	r3, [pc, #496]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d16:	2301      	movs	r3, #1
 8001d18:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d1a:	4b79      	ldr	r3, [pc, #484]	@ (8001f00 <HAL_RCC_OscConfig+0x4bc>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d118      	bne.n	8001d58 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d26:	4b76      	ldr	r3, [pc, #472]	@ (8001f00 <HAL_RCC_OscConfig+0x4bc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a75      	ldr	r2, [pc, #468]	@ (8001f00 <HAL_RCC_OscConfig+0x4bc>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d32:	f7fe ffdf 	bl	8000cf4 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3a:	f7fe ffdb 	bl	8000cf4 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e183      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4c:	4b6c      	ldr	r3, [pc, #432]	@ (8001f00 <HAL_RCC_OscConfig+0x4bc>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d108      	bne.n	8001d72 <HAL_RCC_OscConfig+0x32e>
 8001d60:	4b66      	ldr	r3, [pc, #408]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d66:	4a65      	ldr	r2, [pc, #404]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d70:	e024      	b.n	8001dbc <HAL_RCC_OscConfig+0x378>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b05      	cmp	r3, #5
 8001d78:	d110      	bne.n	8001d9c <HAL_RCC_OscConfig+0x358>
 8001d7a:	4b60      	ldr	r3, [pc, #384]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d80:	4a5e      	ldr	r2, [pc, #376]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001d82:	f043 0304 	orr.w	r3, r3, #4
 8001d86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d8a:	4b5c      	ldr	r3, [pc, #368]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d90:	4a5a      	ldr	r2, [pc, #360]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d9a:	e00f      	b.n	8001dbc <HAL_RCC_OscConfig+0x378>
 8001d9c:	4b57      	ldr	r3, [pc, #348]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001da2:	4a56      	ldr	r2, [pc, #344]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dac:	4b53      	ldr	r3, [pc, #332]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db2:	4a52      	ldr	r2, [pc, #328]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001db4:	f023 0304 	bic.w	r3, r3, #4
 8001db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d016      	beq.n	8001df2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7fe ff96 	bl	8000cf4 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dca:	e00a      	b.n	8001de2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dcc:	f7fe ff92 	bl	8000cf4 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e138      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de2:	4b46      	ldr	r3, [pc, #280]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0ed      	beq.n	8001dcc <HAL_RCC_OscConfig+0x388>
 8001df0:	e015      	b.n	8001e1e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df2:	f7fe ff7f 	bl	8000cf4 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f7fe ff7b 	bl	8000cf4 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e121      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e10:	4b3a      	ldr	r3, [pc, #232]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1ed      	bne.n	8001dfa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e1e:	7ffb      	ldrb	r3, [r7, #31]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d105      	bne.n	8001e30 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e24:	4b35      	ldr	r3, [pc, #212]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e28:	4a34      	ldr	r2, [pc, #208]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001e2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e2e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d03c      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01c      	beq.n	8001e7e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e44:	4b2d      	ldr	r3, [pc, #180]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e4a:	4a2c      	ldr	r2, [pc, #176]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7fe ff4e 	bl	8000cf4 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e5c:	f7fe ff4a 	bl	8000cf4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e0f2      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e6e:	4b23      	ldr	r3, [pc, #140]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ef      	beq.n	8001e5c <HAL_RCC_OscConfig+0x418>
 8001e7c:	e01b      	b.n	8001eb6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e84:	4a1d      	ldr	r2, [pc, #116]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001e86:	f023 0301 	bic.w	r3, r3, #1
 8001e8a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8e:	f7fe ff31 	bl	8000cf4 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e96:	f7fe ff2d 	bl	8000cf4 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e0d5      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1ef      	bne.n	8001e96 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 80c9 	beq.w	8002052 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b0c      	cmp	r3, #12
 8001eca:	f000 8083 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d15e      	bne.n	8001f94 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a08      	ldr	r2, [pc, #32]	@ (8001efc <HAL_RCC_OscConfig+0x4b8>)
 8001edc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7fe ff07 	bl	8000cf4 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee8:	e00c      	b.n	8001f04 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eea:	f7fe ff03 	bl	8000cf4 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d905      	bls.n	8001f04 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e0ab      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f04:	4b55      	ldr	r3, [pc, #340]	@ (800205c <HAL_RCC_OscConfig+0x618>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1ec      	bne.n	8001eea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f10:	4b52      	ldr	r3, [pc, #328]	@ (800205c <HAL_RCC_OscConfig+0x618>)
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	4b52      	ldr	r3, [pc, #328]	@ (8002060 <HAL_RCC_OscConfig+0x61c>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6a11      	ldr	r1, [r2, #32]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f20:	3a01      	subs	r2, #1
 8001f22:	0112      	lsls	r2, r2, #4
 8001f24:	4311      	orrs	r1, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001f2a:	0212      	lsls	r2, r2, #8
 8001f2c:	4311      	orrs	r1, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f32:	0852      	lsrs	r2, r2, #1
 8001f34:	3a01      	subs	r2, #1
 8001f36:	0552      	lsls	r2, r2, #21
 8001f38:	4311      	orrs	r1, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f3e:	0852      	lsrs	r2, r2, #1
 8001f40:	3a01      	subs	r2, #1
 8001f42:	0652      	lsls	r2, r2, #25
 8001f44:	4311      	orrs	r1, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f4a:	06d2      	lsls	r2, r2, #27
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	4943      	ldr	r1, [pc, #268]	@ (800205c <HAL_RCC_OscConfig+0x618>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f54:	4b41      	ldr	r3, [pc, #260]	@ (800205c <HAL_RCC_OscConfig+0x618>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a40      	ldr	r2, [pc, #256]	@ (800205c <HAL_RCC_OscConfig+0x618>)
 8001f5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f60:	4b3e      	ldr	r3, [pc, #248]	@ (800205c <HAL_RCC_OscConfig+0x618>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4a3d      	ldr	r2, [pc, #244]	@ (800205c <HAL_RCC_OscConfig+0x618>)
 8001f66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7fe fec2 	bl	8000cf4 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f74:	f7fe febe 	bl	8000cf4 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e066      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f86:	4b35      	ldr	r3, [pc, #212]	@ (800205c <HAL_RCC_OscConfig+0x618>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x530>
 8001f92:	e05e      	b.n	8002052 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f94:	4b31      	ldr	r3, [pc, #196]	@ (800205c <HAL_RCC_OscConfig+0x618>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a30      	ldr	r2, [pc, #192]	@ (800205c <HAL_RCC_OscConfig+0x618>)
 8001f9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7fe fea8 	bl	8000cf4 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7fe fea4 	bl	8000cf4 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e04c      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fba:	4b28      	ldr	r3, [pc, #160]	@ (800205c <HAL_RCC_OscConfig+0x618>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001fc6:	4b25      	ldr	r3, [pc, #148]	@ (800205c <HAL_RCC_OscConfig+0x618>)
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	4924      	ldr	r1, [pc, #144]	@ (800205c <HAL_RCC_OscConfig+0x618>)
 8001fcc:	4b25      	ldr	r3, [pc, #148]	@ (8002064 <HAL_RCC_OscConfig+0x620>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	60cb      	str	r3, [r1, #12]
 8001fd2:	e03e      	b.n	8002052 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e039      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800205c <HAL_RCC_OscConfig+0x618>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f003 0203 	and.w	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d12c      	bne.n	800204e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	3b01      	subs	r3, #1
 8002000:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002002:	429a      	cmp	r2, r3
 8002004:	d123      	bne.n	800204e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002010:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d11b      	bne.n	800204e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002020:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d113      	bne.n	800204e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002030:	085b      	lsrs	r3, r3, #1
 8002032:	3b01      	subs	r3, #1
 8002034:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002036:	429a      	cmp	r2, r3
 8002038:	d109      	bne.n	800204e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002044:	085b      	lsrs	r3, r3, #1
 8002046:	3b01      	subs	r3, #1
 8002048:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000
 8002060:	019f800c 	.word	0x019f800c
 8002064:	feeefffc 	.word	0xfeeefffc

08002068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e11e      	b.n	80022be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002080:	4b91      	ldr	r3, [pc, #580]	@ (80022c8 <HAL_RCC_ClockConfig+0x260>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d910      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b8e      	ldr	r3, [pc, #568]	@ (80022c8 <HAL_RCC_ClockConfig+0x260>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 020f 	bic.w	r2, r3, #15
 8002096:	498c      	ldr	r1, [pc, #560]	@ (80022c8 <HAL_RCC_ClockConfig+0x260>)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b8a      	ldr	r3, [pc, #552]	@ (80022c8 <HAL_RCC_ClockConfig+0x260>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e106      	b.n	80022be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d073      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d129      	bne.n	8002118 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c4:	4b81      	ldr	r3, [pc, #516]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0f4      	b.n	80022be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80020d4:	f000 f9d0 	bl	8002478 <RCC_GetSysClockFreqFromPLLSource>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4a7c      	ldr	r2, [pc, #496]	@ (80022d0 <HAL_RCC_ClockConfig+0x268>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d93f      	bls.n	8002162 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020e2:	4b7a      	ldr	r3, [pc, #488]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d033      	beq.n	8002162 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d12f      	bne.n	8002162 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002102:	4b72      	ldr	r3, [pc, #456]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800210a:	4a70      	ldr	r2, [pc, #448]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 800210c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002110:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002112:	2380      	movs	r3, #128	@ 0x80
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	e024      	b.n	8002162 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d107      	bne.n	8002130 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002120:	4b6a      	ldr	r3, [pc, #424]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0c6      	b.n	80022be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002130:	4b66      	ldr	r3, [pc, #408]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0be      	b.n	80022be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002140:	f000 f8ce 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 8002144:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4a61      	ldr	r2, [pc, #388]	@ (80022d0 <HAL_RCC_ClockConfig+0x268>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d909      	bls.n	8002162 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800214e:	4b5f      	ldr	r3, [pc, #380]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002156:	4a5d      	ldr	r2, [pc, #372]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 8002158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800215c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800215e:	2380      	movs	r3, #128	@ 0x80
 8002160:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002162:	4b5a      	ldr	r3, [pc, #360]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f023 0203 	bic.w	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4957      	ldr	r1, [pc, #348]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 8002170:	4313      	orrs	r3, r2
 8002172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002174:	f7fe fdbe 	bl	8000cf4 <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	e00a      	b.n	8002192 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217c:	f7fe fdba 	bl	8000cf4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e095      	b.n	80022be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	4b4e      	ldr	r3, [pc, #312]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 020c 	and.w	r2, r3, #12
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d1eb      	bne.n	800217c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d023      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021bc:	4b43      	ldr	r3, [pc, #268]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	4a42      	ldr	r2, [pc, #264]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 80021c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d007      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80021d4:	4b3d      	ldr	r3, [pc, #244]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80021dc:	4a3b      	ldr	r2, [pc, #236]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 80021de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e4:	4b39      	ldr	r3, [pc, #228]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4936      	ldr	r1, [pc, #216]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
 80021f6:	e008      	b.n	800220a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2b80      	cmp	r3, #128	@ 0x80
 80021fc:	d105      	bne.n	800220a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80021fe:	4b33      	ldr	r3, [pc, #204]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	4a32      	ldr	r2, [pc, #200]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 8002204:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002208:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220a:	4b2f      	ldr	r3, [pc, #188]	@ (80022c8 <HAL_RCC_ClockConfig+0x260>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d21d      	bcs.n	8002254 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002218:	4b2b      	ldr	r3, [pc, #172]	@ (80022c8 <HAL_RCC_ClockConfig+0x260>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f023 020f 	bic.w	r2, r3, #15
 8002220:	4929      	ldr	r1, [pc, #164]	@ (80022c8 <HAL_RCC_ClockConfig+0x260>)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	4313      	orrs	r3, r2
 8002226:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002228:	f7fe fd64 	bl	8000cf4 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	e00a      	b.n	8002246 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002230:	f7fe fd60 	bl	8000cf4 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e03b      	b.n	80022be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b20      	ldr	r3, [pc, #128]	@ (80022c8 <HAL_RCC_ClockConfig+0x260>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d1ed      	bne.n	8002230 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002260:	4b1a      	ldr	r3, [pc, #104]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4917      	ldr	r1, [pc, #92]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800227e:	4b13      	ldr	r3, [pc, #76]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	490f      	ldr	r1, [pc, #60]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002292:	f000 f825 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 8002296:	4602      	mov	r2, r0
 8002298:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <HAL_RCC_ClockConfig+0x264>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	490c      	ldr	r1, [pc, #48]	@ (80022d4 <HAL_RCC_ClockConfig+0x26c>)
 80022a4:	5ccb      	ldrb	r3, [r1, r3]
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	fa22 f303 	lsr.w	r3, r2, r3
 80022ae:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <HAL_RCC_ClockConfig+0x270>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022b2:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <HAL_RCC_ClockConfig+0x274>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fc08 	bl	8000acc <HAL_InitTick>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40022000 	.word	0x40022000
 80022cc:	40021000 	.word	0x40021000
 80022d0:	04c4b400 	.word	0x04c4b400
 80022d4:	080069d0 	.word	0x080069d0
 80022d8:	20000000 	.word	0x20000000
 80022dc:	20000004 	.word	0x20000004

080022e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80022e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002398 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d102      	bne.n	80022f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022f2:	4b2a      	ldr	r3, [pc, #168]	@ (800239c <HAL_RCC_GetSysClockFreq+0xbc>)
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	e047      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80022f8:	4b27      	ldr	r3, [pc, #156]	@ (8002398 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b08      	cmp	r3, #8
 8002302:	d102      	bne.n	800230a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002304:	4b26      	ldr	r3, [pc, #152]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	e03e      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800230a:	4b23      	ldr	r3, [pc, #140]	@ (8002398 <HAL_RCC_GetSysClockFreq+0xb8>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b0c      	cmp	r3, #12
 8002314:	d136      	bne.n	8002384 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002316:	4b20      	ldr	r3, [pc, #128]	@ (8002398 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002320:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	3301      	adds	r3, #1
 800232c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d10c      	bne.n	800234e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002334:	4a1a      	ldr	r2, [pc, #104]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
 800233c:	4a16      	ldr	r2, [pc, #88]	@ (8002398 <HAL_RCC_GetSysClockFreq+0xb8>)
 800233e:	68d2      	ldr	r2, [r2, #12]
 8002340:	0a12      	lsrs	r2, r2, #8
 8002342:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	617b      	str	r3, [r7, #20]
      break;
 800234c:	e00c      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234e:	4a13      	ldr	r2, [pc, #76]	@ (800239c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	fbb2 f3f3 	udiv	r3, r2, r3
 8002356:	4a10      	ldr	r2, [pc, #64]	@ (8002398 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002358:	68d2      	ldr	r2, [r2, #12]
 800235a:	0a12      	lsrs	r2, r2, #8
 800235c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	617b      	str	r3, [r7, #20]
      break;
 8002366:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002368:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <HAL_RCC_GetSysClockFreq+0xb8>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	0e5b      	lsrs	r3, r3, #25
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	3301      	adds	r3, #1
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	e001      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002388:	693b      	ldr	r3, [r7, #16]
}
 800238a:	4618      	mov	r0, r3
 800238c:	371c      	adds	r7, #28
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	00f42400 	.word	0x00f42400
 80023a0:	016e3600 	.word	0x016e3600

080023a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a8:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000000 	.word	0x20000000

080023bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023c0:	f7ff fff0 	bl	80023a4 <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4904      	ldr	r1, [pc, #16]	@ (80023e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	080069e0 	.word	0x080069e0

080023e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023ec:	f7ff ffda 	bl	80023a4 <HAL_RCC_GetHCLKFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	0adb      	lsrs	r3, r3, #11
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	4904      	ldr	r1, [pc, #16]	@ (8002410 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	080069e0 	.word	0x080069e0

08002414 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	220f      	movs	r2, #15
 8002422:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002424:	4b12      	ldr	r3, [pc, #72]	@ (8002470 <HAL_RCC_GetClockConfig+0x5c>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0203 	and.w	r2, r3, #3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002430:	4b0f      	ldr	r3, [pc, #60]	@ (8002470 <HAL_RCC_GetClockConfig+0x5c>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <HAL_RCC_GetClockConfig+0x5c>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002448:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <HAL_RCC_GetClockConfig+0x5c>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	08db      	lsrs	r3, r3, #3
 800244e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002456:	4b07      	ldr	r3, [pc, #28]	@ (8002474 <HAL_RCC_GetClockConfig+0x60>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 020f 	and.w	r2, r3, #15
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	601a      	str	r2, [r3, #0]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	40022000 	.word	0x40022000

08002478 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800247e:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002488:	4b1b      	ldr	r3, [pc, #108]	@ (80024f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	3301      	adds	r3, #1
 8002494:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d10c      	bne.n	80024b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800249c:	4a17      	ldr	r2, [pc, #92]	@ (80024fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	4a14      	ldr	r2, [pc, #80]	@ (80024f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024a6:	68d2      	ldr	r2, [r2, #12]
 80024a8:	0a12      	lsrs	r2, r2, #8
 80024aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	617b      	str	r3, [r7, #20]
    break;
 80024b4:	e00c      	b.n	80024d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024b6:	4a12      	ldr	r2, [pc, #72]	@ (8002500 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80024be:	4a0e      	ldr	r2, [pc, #56]	@ (80024f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024c0:	68d2      	ldr	r2, [r2, #12]
 80024c2:	0a12      	lsrs	r2, r2, #8
 80024c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024c8:	fb02 f303 	mul.w	r3, r2, r3
 80024cc:	617b      	str	r3, [r7, #20]
    break;
 80024ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024d0:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0e5b      	lsrs	r3, r3, #25
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	3301      	adds	r3, #1
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80024ea:	687b      	ldr	r3, [r7, #4]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40021000 	.word	0x40021000
 80024fc:	016e3600 	.word	0x016e3600
 8002500:	00f42400 	.word	0x00f42400

08002504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800250c:	2300      	movs	r3, #0
 800250e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002510:	2300      	movs	r3, #0
 8002512:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8098 	beq.w	8002652 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002526:	4b43      	ldr	r3, [pc, #268]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10d      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	4b40      	ldr	r3, [pc, #256]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002536:	4a3f      	ldr	r2, [pc, #252]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800253c:	6593      	str	r3, [r2, #88]	@ 0x58
 800253e:	4b3d      	ldr	r3, [pc, #244]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254a:	2301      	movs	r3, #1
 800254c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800254e:	4b3a      	ldr	r3, [pc, #232]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a39      	ldr	r2, [pc, #228]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002558:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800255a:	f7fe fbcb 	bl	8000cf4 <HAL_GetTick>
 800255e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002560:	e009      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002562:	f7fe fbc7 	bl	8000cf4 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d902      	bls.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	74fb      	strb	r3, [r7, #19]
        break;
 8002574:	e005      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002576:	4b30      	ldr	r3, [pc, #192]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0ef      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002582:	7cfb      	ldrb	r3, [r7, #19]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d159      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002588:	4b2a      	ldr	r3, [pc, #168]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002592:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01e      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d019      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025a4:	4b23      	ldr	r3, [pc, #140]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025b0:	4b20      	ldr	r3, [pc, #128]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025d0:	4a18      	ldr	r2, [pc, #96]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d016      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7fe fb87 	bl	8000cf4 <HAL_GetTick>
 80025e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e8:	e00b      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe fb83 	bl	8000cf4 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d902      	bls.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002600:	e006      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002602:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ec      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10b      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002616:	4b07      	ldr	r3, [pc, #28]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002624:	4903      	ldr	r1, [pc, #12]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800262c:	e008      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	74bb      	strb	r3, [r7, #18]
 8002632:	e005      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002634:	40021000 	.word	0x40021000
 8002638:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002640:	7c7b      	ldrb	r3, [r7, #17]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d105      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002646:	4ba7      	ldr	r3, [pc, #668]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264a:	4aa6      	ldr	r2, [pc, #664]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800264c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002650:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800265e:	4ba1      	ldr	r3, [pc, #644]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002664:	f023 0203 	bic.w	r2, r3, #3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	499d      	ldr	r1, [pc, #628]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002680:	4b98      	ldr	r3, [pc, #608]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002686:	f023 020c 	bic.w	r2, r3, #12
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	4995      	ldr	r1, [pc, #596]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026a2:	4b90      	ldr	r3, [pc, #576]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	498c      	ldr	r1, [pc, #560]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026c4:	4b87      	ldr	r3, [pc, #540]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	4984      	ldr	r1, [pc, #528]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026e6:	4b7f      	ldr	r3, [pc, #508]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	497b      	ldr	r1, [pc, #492]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002708:	4b76      	ldr	r3, [pc, #472]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	4973      	ldr	r1, [pc, #460]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800272a:	4b6e      	ldr	r3, [pc, #440]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002730:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	496a      	ldr	r1, [pc, #424]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800274c:	4b65      	ldr	r3, [pc, #404]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002752:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4962      	ldr	r1, [pc, #392]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800276e:	4b5d      	ldr	r3, [pc, #372]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002774:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277c:	4959      	ldr	r1, [pc, #356]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002790:	4b54      	ldr	r3, [pc, #336]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002792:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002796:	f023 0203 	bic.w	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279e:	4951      	ldr	r1, [pc, #324]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027b2:	4b4c      	ldr	r3, [pc, #304]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c0:	4948      	ldr	r1, [pc, #288]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d015      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027d4:	4b43      	ldr	r3, [pc, #268]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	4940      	ldr	r1, [pc, #256]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027f2:	d105      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f4:	4b3b      	ldr	r3, [pc, #236]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	4a3a      	ldr	r2, [pc, #232]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027fe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002808:	2b00      	cmp	r3, #0
 800280a:	d015      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800280c:	4b35      	ldr	r3, [pc, #212]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002812:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281a:	4932      	ldr	r1, [pc, #200]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002826:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800282a:	d105      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800282c:	4b2d      	ldr	r3, [pc, #180]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4a2c      	ldr	r2, [pc, #176]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002836:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d015      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002844:	4b27      	ldr	r3, [pc, #156]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002852:	4924      	ldr	r1, [pc, #144]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002862:	d105      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002864:	4b1f      	ldr	r3, [pc, #124]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a1e      	ldr	r2, [pc, #120]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800286e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d015      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800287c:	4b19      	ldr	r3, [pc, #100]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800288a:	4916      	ldr	r1, [pc, #88]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002896:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800289a:	d105      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800289c:	4b11      	ldr	r3, [pc, #68]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a10      	ldr	r2, [pc, #64]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d019      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028b4:	4b0b      	ldr	r3, [pc, #44]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c2:	4908      	ldr	r1, [pc, #32]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028d2:	d109      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d4:	4b03      	ldr	r3, [pc, #12]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a02      	ldr	r2, [pc, #8]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028de:	60d3      	str	r3, [r2, #12]
 80028e0:	e002      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d015      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028f4:	4b29      	ldr	r3, [pc, #164]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	4926      	ldr	r1, [pc, #152]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002912:	d105      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002914:	4b21      	ldr	r3, [pc, #132]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a20      	ldr	r2, [pc, #128]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800291a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d015      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800292c:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002932:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800293a:	4918      	ldr	r1, [pc, #96]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800294a:	d105      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800294c:	4b13      	ldr	r3, [pc, #76]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a12      	ldr	r2, [pc, #72]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002956:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d015      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002964:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002966:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800296a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002972:	490a      	ldr	r1, [pc, #40]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002982:	d105      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4a04      	ldr	r2, [pc, #16]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800298a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800298e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002990:	7cbb      	ldrb	r3, [r7, #18]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e049      	b.n	8002a46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f841 	bl	8002a4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3304      	adds	r3, #4
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f000 fa30 	bl	8002e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d001      	beq.n	8002a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e054      	b.n	8002b26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a26      	ldr	r2, [pc, #152]	@ (8002b34 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d022      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x80>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa6:	d01d      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x80>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a22      	ldr	r2, [pc, #136]	@ (8002b38 <HAL_TIM_Base_Start_IT+0xd4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d018      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x80>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a21      	ldr	r2, [pc, #132]	@ (8002b3c <HAL_TIM_Base_Start_IT+0xd8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d013      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x80>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b40 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00e      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x80>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1e      	ldr	r2, [pc, #120]	@ (8002b44 <HAL_TIM_Base_Start_IT+0xe0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d009      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x80>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8002b48 <HAL_TIM_Base_Start_IT+0xe4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d004      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x80>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1b      	ldr	r2, [pc, #108]	@ (8002b4c <HAL_TIM_Base_Start_IT+0xe8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d115      	bne.n	8002b10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	4b19      	ldr	r3, [pc, #100]	@ (8002b50 <HAL_TIM_Base_Start_IT+0xec>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d015      	beq.n	8002b22 <HAL_TIM_Base_Start_IT+0xbe>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002afc:	d011      	beq.n	8002b22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0e:	e008      	b.n	8002b22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e000      	b.n	8002b24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40000800 	.word	0x40000800
 8002b40:	40000c00 	.word	0x40000c00
 8002b44:	40013400 	.word	0x40013400
 8002b48:	40014000 	.word	0x40014000
 8002b4c:	40015000 	.word	0x40015000
 8002b50:	00010007 	.word	0x00010007

08002b54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d020      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01b      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0202 	mvn.w	r2, #2
 8002b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f931 	bl	8002e06 <HAL_TIM_IC_CaptureCallback>
 8002ba4:	e005      	b.n	8002bb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f923 	bl	8002df2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f934 	bl	8002e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d020      	beq.n	8002c04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01b      	beq.n	8002c04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0204 	mvn.w	r2, #4
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f90b 	bl	8002e06 <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f8fd 	bl	8002df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f90e 	bl	8002e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d020      	beq.n	8002c50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01b      	beq.n	8002c50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0208 	mvn.w	r2, #8
 8002c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2204      	movs	r2, #4
 8002c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f8e5 	bl	8002e06 <HAL_TIM_IC_CaptureCallback>
 8002c3c:	e005      	b.n	8002c4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f8d7 	bl	8002df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f8e8 	bl	8002e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d020      	beq.n	8002c9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01b      	beq.n	8002c9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0210 	mvn.w	r2, #16
 8002c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2208      	movs	r2, #8
 8002c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f8bf 	bl	8002e06 <HAL_TIM_IC_CaptureCallback>
 8002c88:	e005      	b.n	8002c96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f8b1 	bl	8002df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f8c2 	bl	8002e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d007      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0201 	mvn.w	r2, #1
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fd fe02 	bl	80008c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d104      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00c      	beq.n	8002cee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d007      	beq.n	8002cee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f969 	bl	8002fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00c      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d007      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f961 	bl	8002fd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00c      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d007      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f87c 	bl	8002e2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00c      	beq.n	8002d5a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f06f 0220 	mvn.w	r2, #32
 8002d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f929 	bl	8002fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00c      	beq.n	8002d7e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d007      	beq.n	8002d7e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f935 	bl	8002fe8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00c      	beq.n	8002da2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f92d 	bl	8002ffc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00c      	beq.n	8002dc6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d007      	beq.n	8002dc6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f925 	bl	8003010 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00c      	beq.n	8002dea <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f91d 	bl	8003024 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dea:	bf00      	nop
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a4c      	ldr	r2, [pc, #304]	@ (8002f88 <TIM_Base_SetConfig+0x144>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d017      	beq.n	8002e8c <TIM_Base_SetConfig+0x48>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e62:	d013      	beq.n	8002e8c <TIM_Base_SetConfig+0x48>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a49      	ldr	r2, [pc, #292]	@ (8002f8c <TIM_Base_SetConfig+0x148>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00f      	beq.n	8002e8c <TIM_Base_SetConfig+0x48>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a48      	ldr	r2, [pc, #288]	@ (8002f90 <TIM_Base_SetConfig+0x14c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00b      	beq.n	8002e8c <TIM_Base_SetConfig+0x48>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a47      	ldr	r2, [pc, #284]	@ (8002f94 <TIM_Base_SetConfig+0x150>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d007      	beq.n	8002e8c <TIM_Base_SetConfig+0x48>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a46      	ldr	r2, [pc, #280]	@ (8002f98 <TIM_Base_SetConfig+0x154>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d003      	beq.n	8002e8c <TIM_Base_SetConfig+0x48>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a45      	ldr	r2, [pc, #276]	@ (8002f9c <TIM_Base_SetConfig+0x158>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d108      	bne.n	8002e9e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a39      	ldr	r2, [pc, #228]	@ (8002f88 <TIM_Base_SetConfig+0x144>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d023      	beq.n	8002eee <TIM_Base_SetConfig+0xaa>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eac:	d01f      	beq.n	8002eee <TIM_Base_SetConfig+0xaa>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a36      	ldr	r2, [pc, #216]	@ (8002f8c <TIM_Base_SetConfig+0x148>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01b      	beq.n	8002eee <TIM_Base_SetConfig+0xaa>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a35      	ldr	r2, [pc, #212]	@ (8002f90 <TIM_Base_SetConfig+0x14c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d017      	beq.n	8002eee <TIM_Base_SetConfig+0xaa>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a34      	ldr	r2, [pc, #208]	@ (8002f94 <TIM_Base_SetConfig+0x150>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d013      	beq.n	8002eee <TIM_Base_SetConfig+0xaa>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a33      	ldr	r2, [pc, #204]	@ (8002f98 <TIM_Base_SetConfig+0x154>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00f      	beq.n	8002eee <TIM_Base_SetConfig+0xaa>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a33      	ldr	r2, [pc, #204]	@ (8002fa0 <TIM_Base_SetConfig+0x15c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00b      	beq.n	8002eee <TIM_Base_SetConfig+0xaa>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a32      	ldr	r2, [pc, #200]	@ (8002fa4 <TIM_Base_SetConfig+0x160>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d007      	beq.n	8002eee <TIM_Base_SetConfig+0xaa>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a31      	ldr	r2, [pc, #196]	@ (8002fa8 <TIM_Base_SetConfig+0x164>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d003      	beq.n	8002eee <TIM_Base_SetConfig+0xaa>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a2c      	ldr	r2, [pc, #176]	@ (8002f9c <TIM_Base_SetConfig+0x158>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d108      	bne.n	8002f00 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a18      	ldr	r2, [pc, #96]	@ (8002f88 <TIM_Base_SetConfig+0x144>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d013      	beq.n	8002f54 <TIM_Base_SetConfig+0x110>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8002f98 <TIM_Base_SetConfig+0x154>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00f      	beq.n	8002f54 <TIM_Base_SetConfig+0x110>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a1a      	ldr	r2, [pc, #104]	@ (8002fa0 <TIM_Base_SetConfig+0x15c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00b      	beq.n	8002f54 <TIM_Base_SetConfig+0x110>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a19      	ldr	r2, [pc, #100]	@ (8002fa4 <TIM_Base_SetConfig+0x160>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d007      	beq.n	8002f54 <TIM_Base_SetConfig+0x110>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a18      	ldr	r2, [pc, #96]	@ (8002fa8 <TIM_Base_SetConfig+0x164>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d003      	beq.n	8002f54 <TIM_Base_SetConfig+0x110>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a13      	ldr	r2, [pc, #76]	@ (8002f9c <TIM_Base_SetConfig+0x158>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d103      	bne.n	8002f5c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d105      	bne.n	8002f7a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f023 0201 	bic.w	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	611a      	str	r2, [r3, #16]
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40012c00 	.word	0x40012c00
 8002f8c:	40000400 	.word	0x40000400
 8002f90:	40000800 	.word	0x40000800
 8002f94:	40000c00 	.word	0x40000c00
 8002f98:	40013400 	.word	0x40013400
 8002f9c:	40015000 	.word	0x40015000
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	40014400 	.word	0x40014400
 8002fa8:	40014800 	.word	0x40014800

08002fac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e042      	b.n	80030d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003050:	2b00      	cmp	r3, #0
 8003052:	d106      	bne.n	8003062 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7fd fcdd 	bl	8000a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2224      	movs	r2, #36	@ 0x24
 8003066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fb24 	bl	80036d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f825 	bl	80030d8 <UART_SetConfig>
 800308e:	4603      	mov	r3, r0
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e01b      	b.n	80030d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fba3 	bl	8003814 <UART_CheckIdleState>
 80030ce:	4603      	mov	r3, r0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030dc:	b08c      	sub	sp, #48	@ 0x30
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4baa      	ldr	r3, [pc, #680]	@ (80033b0 <UART_SetConfig+0x2d8>)
 8003108:	4013      	ands	r3, r2
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003110:	430b      	orrs	r3, r1
 8003112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a9f      	ldr	r2, [pc, #636]	@ (80033b4 <UART_SetConfig+0x2dc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003140:	4313      	orrs	r3, r2
 8003142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800314e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003158:	430b      	orrs	r3, r1
 800315a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003162:	f023 010f 	bic.w	r1, r3, #15
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a90      	ldr	r2, [pc, #576]	@ (80033b8 <UART_SetConfig+0x2e0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d125      	bne.n	80031c8 <UART_SetConfig+0xf0>
 800317c:	4b8f      	ldr	r3, [pc, #572]	@ (80033bc <UART_SetConfig+0x2e4>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b03      	cmp	r3, #3
 8003188:	d81a      	bhi.n	80031c0 <UART_SetConfig+0xe8>
 800318a:	a201      	add	r2, pc, #4	@ (adr r2, 8003190 <UART_SetConfig+0xb8>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031a1 	.word	0x080031a1
 8003194:	080031b1 	.word	0x080031b1
 8003198:	080031a9 	.word	0x080031a9
 800319c:	080031b9 	.word	0x080031b9
 80031a0:	2301      	movs	r3, #1
 80031a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031a6:	e116      	b.n	80033d6 <UART_SetConfig+0x2fe>
 80031a8:	2302      	movs	r3, #2
 80031aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ae:	e112      	b.n	80033d6 <UART_SetConfig+0x2fe>
 80031b0:	2304      	movs	r3, #4
 80031b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031b6:	e10e      	b.n	80033d6 <UART_SetConfig+0x2fe>
 80031b8:	2308      	movs	r3, #8
 80031ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031be:	e10a      	b.n	80033d6 <UART_SetConfig+0x2fe>
 80031c0:	2310      	movs	r3, #16
 80031c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031c6:	e106      	b.n	80033d6 <UART_SetConfig+0x2fe>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a7c      	ldr	r2, [pc, #496]	@ (80033c0 <UART_SetConfig+0x2e8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d138      	bne.n	8003244 <UART_SetConfig+0x16c>
 80031d2:	4b7a      	ldr	r3, [pc, #488]	@ (80033bc <UART_SetConfig+0x2e4>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b0c      	cmp	r3, #12
 80031de:	d82d      	bhi.n	800323c <UART_SetConfig+0x164>
 80031e0:	a201      	add	r2, pc, #4	@ (adr r2, 80031e8 <UART_SetConfig+0x110>)
 80031e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e6:	bf00      	nop
 80031e8:	0800321d 	.word	0x0800321d
 80031ec:	0800323d 	.word	0x0800323d
 80031f0:	0800323d 	.word	0x0800323d
 80031f4:	0800323d 	.word	0x0800323d
 80031f8:	0800322d 	.word	0x0800322d
 80031fc:	0800323d 	.word	0x0800323d
 8003200:	0800323d 	.word	0x0800323d
 8003204:	0800323d 	.word	0x0800323d
 8003208:	08003225 	.word	0x08003225
 800320c:	0800323d 	.word	0x0800323d
 8003210:	0800323d 	.word	0x0800323d
 8003214:	0800323d 	.word	0x0800323d
 8003218:	08003235 	.word	0x08003235
 800321c:	2300      	movs	r3, #0
 800321e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003222:	e0d8      	b.n	80033d6 <UART_SetConfig+0x2fe>
 8003224:	2302      	movs	r3, #2
 8003226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800322a:	e0d4      	b.n	80033d6 <UART_SetConfig+0x2fe>
 800322c:	2304      	movs	r3, #4
 800322e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003232:	e0d0      	b.n	80033d6 <UART_SetConfig+0x2fe>
 8003234:	2308      	movs	r3, #8
 8003236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800323a:	e0cc      	b.n	80033d6 <UART_SetConfig+0x2fe>
 800323c:	2310      	movs	r3, #16
 800323e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003242:	e0c8      	b.n	80033d6 <UART_SetConfig+0x2fe>
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a5e      	ldr	r2, [pc, #376]	@ (80033c4 <UART_SetConfig+0x2ec>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d125      	bne.n	800329a <UART_SetConfig+0x1c2>
 800324e:	4b5b      	ldr	r3, [pc, #364]	@ (80033bc <UART_SetConfig+0x2e4>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003254:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003258:	2b30      	cmp	r3, #48	@ 0x30
 800325a:	d016      	beq.n	800328a <UART_SetConfig+0x1b2>
 800325c:	2b30      	cmp	r3, #48	@ 0x30
 800325e:	d818      	bhi.n	8003292 <UART_SetConfig+0x1ba>
 8003260:	2b20      	cmp	r3, #32
 8003262:	d00a      	beq.n	800327a <UART_SetConfig+0x1a2>
 8003264:	2b20      	cmp	r3, #32
 8003266:	d814      	bhi.n	8003292 <UART_SetConfig+0x1ba>
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <UART_SetConfig+0x19a>
 800326c:	2b10      	cmp	r3, #16
 800326e:	d008      	beq.n	8003282 <UART_SetConfig+0x1aa>
 8003270:	e00f      	b.n	8003292 <UART_SetConfig+0x1ba>
 8003272:	2300      	movs	r3, #0
 8003274:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003278:	e0ad      	b.n	80033d6 <UART_SetConfig+0x2fe>
 800327a:	2302      	movs	r3, #2
 800327c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003280:	e0a9      	b.n	80033d6 <UART_SetConfig+0x2fe>
 8003282:	2304      	movs	r3, #4
 8003284:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003288:	e0a5      	b.n	80033d6 <UART_SetConfig+0x2fe>
 800328a:	2308      	movs	r3, #8
 800328c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003290:	e0a1      	b.n	80033d6 <UART_SetConfig+0x2fe>
 8003292:	2310      	movs	r3, #16
 8003294:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003298:	e09d      	b.n	80033d6 <UART_SetConfig+0x2fe>
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a4a      	ldr	r2, [pc, #296]	@ (80033c8 <UART_SetConfig+0x2f0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d125      	bne.n	80032f0 <UART_SetConfig+0x218>
 80032a4:	4b45      	ldr	r3, [pc, #276]	@ (80033bc <UART_SetConfig+0x2e4>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80032ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80032b0:	d016      	beq.n	80032e0 <UART_SetConfig+0x208>
 80032b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80032b4:	d818      	bhi.n	80032e8 <UART_SetConfig+0x210>
 80032b6:	2b80      	cmp	r3, #128	@ 0x80
 80032b8:	d00a      	beq.n	80032d0 <UART_SetConfig+0x1f8>
 80032ba:	2b80      	cmp	r3, #128	@ 0x80
 80032bc:	d814      	bhi.n	80032e8 <UART_SetConfig+0x210>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <UART_SetConfig+0x1f0>
 80032c2:	2b40      	cmp	r3, #64	@ 0x40
 80032c4:	d008      	beq.n	80032d8 <UART_SetConfig+0x200>
 80032c6:	e00f      	b.n	80032e8 <UART_SetConfig+0x210>
 80032c8:	2300      	movs	r3, #0
 80032ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ce:	e082      	b.n	80033d6 <UART_SetConfig+0x2fe>
 80032d0:	2302      	movs	r3, #2
 80032d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032d6:	e07e      	b.n	80033d6 <UART_SetConfig+0x2fe>
 80032d8:	2304      	movs	r3, #4
 80032da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032de:	e07a      	b.n	80033d6 <UART_SetConfig+0x2fe>
 80032e0:	2308      	movs	r3, #8
 80032e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032e6:	e076      	b.n	80033d6 <UART_SetConfig+0x2fe>
 80032e8:	2310      	movs	r3, #16
 80032ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ee:	e072      	b.n	80033d6 <UART_SetConfig+0x2fe>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a35      	ldr	r2, [pc, #212]	@ (80033cc <UART_SetConfig+0x2f4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d12a      	bne.n	8003350 <UART_SetConfig+0x278>
 80032fa:	4b30      	ldr	r3, [pc, #192]	@ (80033bc <UART_SetConfig+0x2e4>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003300:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003304:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003308:	d01a      	beq.n	8003340 <UART_SetConfig+0x268>
 800330a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800330e:	d81b      	bhi.n	8003348 <UART_SetConfig+0x270>
 8003310:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003314:	d00c      	beq.n	8003330 <UART_SetConfig+0x258>
 8003316:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800331a:	d815      	bhi.n	8003348 <UART_SetConfig+0x270>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <UART_SetConfig+0x250>
 8003320:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003324:	d008      	beq.n	8003338 <UART_SetConfig+0x260>
 8003326:	e00f      	b.n	8003348 <UART_SetConfig+0x270>
 8003328:	2300      	movs	r3, #0
 800332a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800332e:	e052      	b.n	80033d6 <UART_SetConfig+0x2fe>
 8003330:	2302      	movs	r3, #2
 8003332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003336:	e04e      	b.n	80033d6 <UART_SetConfig+0x2fe>
 8003338:	2304      	movs	r3, #4
 800333a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800333e:	e04a      	b.n	80033d6 <UART_SetConfig+0x2fe>
 8003340:	2308      	movs	r3, #8
 8003342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003346:	e046      	b.n	80033d6 <UART_SetConfig+0x2fe>
 8003348:	2310      	movs	r3, #16
 800334a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800334e:	e042      	b.n	80033d6 <UART_SetConfig+0x2fe>
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a17      	ldr	r2, [pc, #92]	@ (80033b4 <UART_SetConfig+0x2dc>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d13a      	bne.n	80033d0 <UART_SetConfig+0x2f8>
 800335a:	4b18      	ldr	r3, [pc, #96]	@ (80033bc <UART_SetConfig+0x2e4>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003360:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003364:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003368:	d01a      	beq.n	80033a0 <UART_SetConfig+0x2c8>
 800336a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800336e:	d81b      	bhi.n	80033a8 <UART_SetConfig+0x2d0>
 8003370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003374:	d00c      	beq.n	8003390 <UART_SetConfig+0x2b8>
 8003376:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800337a:	d815      	bhi.n	80033a8 <UART_SetConfig+0x2d0>
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <UART_SetConfig+0x2b0>
 8003380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003384:	d008      	beq.n	8003398 <UART_SetConfig+0x2c0>
 8003386:	e00f      	b.n	80033a8 <UART_SetConfig+0x2d0>
 8003388:	2300      	movs	r3, #0
 800338a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800338e:	e022      	b.n	80033d6 <UART_SetConfig+0x2fe>
 8003390:	2302      	movs	r3, #2
 8003392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003396:	e01e      	b.n	80033d6 <UART_SetConfig+0x2fe>
 8003398:	2304      	movs	r3, #4
 800339a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800339e:	e01a      	b.n	80033d6 <UART_SetConfig+0x2fe>
 80033a0:	2308      	movs	r3, #8
 80033a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033a6:	e016      	b.n	80033d6 <UART_SetConfig+0x2fe>
 80033a8:	2310      	movs	r3, #16
 80033aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033ae:	e012      	b.n	80033d6 <UART_SetConfig+0x2fe>
 80033b0:	cfff69f3 	.word	0xcfff69f3
 80033b4:	40008000 	.word	0x40008000
 80033b8:	40013800 	.word	0x40013800
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40004400 	.word	0x40004400
 80033c4:	40004800 	.word	0x40004800
 80033c8:	40004c00 	.word	0x40004c00
 80033cc:	40005000 	.word	0x40005000
 80033d0:	2310      	movs	r3, #16
 80033d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4aae      	ldr	r2, [pc, #696]	@ (8003694 <UART_SetConfig+0x5bc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	f040 8097 	bne.w	8003510 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d823      	bhi.n	8003432 <UART_SetConfig+0x35a>
 80033ea:	a201      	add	r2, pc, #4	@ (adr r2, 80033f0 <UART_SetConfig+0x318>)
 80033ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f0:	08003415 	.word	0x08003415
 80033f4:	08003433 	.word	0x08003433
 80033f8:	0800341d 	.word	0x0800341d
 80033fc:	08003433 	.word	0x08003433
 8003400:	08003423 	.word	0x08003423
 8003404:	08003433 	.word	0x08003433
 8003408:	08003433 	.word	0x08003433
 800340c:	08003433 	.word	0x08003433
 8003410:	0800342b 	.word	0x0800342b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003414:	f7fe ffd2 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 8003418:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800341a:	e010      	b.n	800343e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800341c:	4b9e      	ldr	r3, [pc, #632]	@ (8003698 <UART_SetConfig+0x5c0>)
 800341e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003420:	e00d      	b.n	800343e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003422:	f7fe ff5d 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 8003426:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003428:	e009      	b.n	800343e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800342a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800342e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003430:	e005      	b.n	800343e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800343c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8130 	beq.w	80036a6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	4a94      	ldr	r2, [pc, #592]	@ (800369c <UART_SetConfig+0x5c4>)
 800344c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003450:	461a      	mov	r2, r3
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003454:	fbb3 f3f2 	udiv	r3, r3, r2
 8003458:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4413      	add	r3, r2
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	429a      	cmp	r2, r3
 8003468:	d305      	bcc.n	8003476 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	429a      	cmp	r2, r3
 8003474:	d903      	bls.n	800347e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800347c:	e113      	b.n	80036a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	2200      	movs	r2, #0
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	60fa      	str	r2, [r7, #12]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	4a84      	ldr	r2, [pc, #528]	@ (800369c <UART_SetConfig+0x5c4>)
 800348c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003490:	b29b      	uxth	r3, r3
 8003492:	2200      	movs	r2, #0
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800349c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034a0:	f7fc febe 	bl	8000220 <__aeabi_uldivmod>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	020b      	lsls	r3, r1, #8
 80034b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80034ba:	0202      	lsls	r2, r0, #8
 80034bc:	6979      	ldr	r1, [r7, #20]
 80034be:	6849      	ldr	r1, [r1, #4]
 80034c0:	0849      	lsrs	r1, r1, #1
 80034c2:	2000      	movs	r0, #0
 80034c4:	460c      	mov	r4, r1
 80034c6:	4605      	mov	r5, r0
 80034c8:	eb12 0804 	adds.w	r8, r2, r4
 80034cc:	eb43 0905 	adc.w	r9, r3, r5
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	469a      	mov	sl, r3
 80034d8:	4693      	mov	fp, r2
 80034da:	4652      	mov	r2, sl
 80034dc:	465b      	mov	r3, fp
 80034de:	4640      	mov	r0, r8
 80034e0:	4649      	mov	r1, r9
 80034e2:	f7fc fe9d 	bl	8000220 <__aeabi_uldivmod>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4613      	mov	r3, r2
 80034ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034f4:	d308      	bcc.n	8003508 <UART_SetConfig+0x430>
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034fc:	d204      	bcs.n	8003508 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6a3a      	ldr	r2, [r7, #32]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	e0ce      	b.n	80036a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800350e:	e0ca      	b.n	80036a6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003518:	d166      	bne.n	80035e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800351a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800351e:	2b08      	cmp	r3, #8
 8003520:	d827      	bhi.n	8003572 <UART_SetConfig+0x49a>
 8003522:	a201      	add	r2, pc, #4	@ (adr r2, 8003528 <UART_SetConfig+0x450>)
 8003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003528:	0800354d 	.word	0x0800354d
 800352c:	08003555 	.word	0x08003555
 8003530:	0800355d 	.word	0x0800355d
 8003534:	08003573 	.word	0x08003573
 8003538:	08003563 	.word	0x08003563
 800353c:	08003573 	.word	0x08003573
 8003540:	08003573 	.word	0x08003573
 8003544:	08003573 	.word	0x08003573
 8003548:	0800356b 	.word	0x0800356b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800354c:	f7fe ff36 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 8003550:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003552:	e014      	b.n	800357e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003554:	f7fe ff48 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8003558:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800355a:	e010      	b.n	800357e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800355c:	4b4e      	ldr	r3, [pc, #312]	@ (8003698 <UART_SetConfig+0x5c0>)
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003560:	e00d      	b.n	800357e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003562:	f7fe febd 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 8003566:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003568:	e009      	b.n	800357e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800356a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800356e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003570:	e005      	b.n	800357e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800357c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 8090 	beq.w	80036a6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	4a44      	ldr	r2, [pc, #272]	@ (800369c <UART_SetConfig+0x5c4>)
 800358c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003590:	461a      	mov	r2, r3
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	fbb3 f3f2 	udiv	r3, r3, r2
 8003598:	005a      	lsls	r2, r3, #1
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	441a      	add	r2, r3
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	2b0f      	cmp	r3, #15
 80035b0:	d916      	bls.n	80035e0 <UART_SetConfig+0x508>
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b8:	d212      	bcs.n	80035e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f023 030f 	bic.w	r3, r3, #15
 80035c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	085b      	lsrs	r3, r3, #1
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	8bfb      	ldrh	r3, [r7, #30]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	8bfa      	ldrh	r2, [r7, #30]
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	e062      	b.n	80036a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80035e6:	e05e      	b.n	80036a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d828      	bhi.n	8003642 <UART_SetConfig+0x56a>
 80035f0:	a201      	add	r2, pc, #4	@ (adr r2, 80035f8 <UART_SetConfig+0x520>)
 80035f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f6:	bf00      	nop
 80035f8:	0800361d 	.word	0x0800361d
 80035fc:	08003625 	.word	0x08003625
 8003600:	0800362d 	.word	0x0800362d
 8003604:	08003643 	.word	0x08003643
 8003608:	08003633 	.word	0x08003633
 800360c:	08003643 	.word	0x08003643
 8003610:	08003643 	.word	0x08003643
 8003614:	08003643 	.word	0x08003643
 8003618:	0800363b 	.word	0x0800363b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800361c:	f7fe fece 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 8003620:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003622:	e014      	b.n	800364e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003624:	f7fe fee0 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8003628:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800362a:	e010      	b.n	800364e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800362c:	4b1a      	ldr	r3, [pc, #104]	@ (8003698 <UART_SetConfig+0x5c0>)
 800362e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003630:	e00d      	b.n	800364e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003632:	f7fe fe55 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 8003636:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003638:	e009      	b.n	800364e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800363a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003640:	e005      	b.n	800364e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800364c:	bf00      	nop
    }

    if (pclk != 0U)
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	2b00      	cmp	r3, #0
 8003652:	d028      	beq.n	80036a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003658:	4a10      	ldr	r2, [pc, #64]	@ (800369c <UART_SetConfig+0x5c4>)
 800365a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800365e:	461a      	mov	r2, r3
 8003660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003662:	fbb3 f2f2 	udiv	r2, r3, r2
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	441a      	add	r2, r3
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	fbb2 f3f3 	udiv	r3, r2, r3
 8003676:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	2b0f      	cmp	r3, #15
 800367c:	d910      	bls.n	80036a0 <UART_SetConfig+0x5c8>
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003684:	d20c      	bcs.n	80036a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	b29a      	uxth	r2, r3
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60da      	str	r2, [r3, #12]
 8003690:	e009      	b.n	80036a6 <UART_SetConfig+0x5ce>
 8003692:	bf00      	nop
 8003694:	40008000 	.word	0x40008000
 8003698:	00f42400 	.word	0x00f42400
 800369c:	080069e8 	.word	0x080069e8
      }
      else
      {
        ret = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2200      	movs	r2, #0
 80036ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2200      	movs	r2, #0
 80036c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80036c2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3730      	adds	r7, #48	@ 0x30
 80036ca:	46bd      	mov	sp, r7
 80036cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080036d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01a      	beq.n	80037e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ce:	d10a      	bne.n	80037e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
  }
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b098      	sub	sp, #96	@ 0x60
 8003818:	af02      	add	r7, sp, #8
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003824:	f7fd fa66 	bl	8000cf4 <HAL_GetTick>
 8003828:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b08      	cmp	r3, #8
 8003836:	d12f      	bne.n	8003898 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003838:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003840:	2200      	movs	r2, #0
 8003842:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f88e 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d022      	beq.n	8003898 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385a:	e853 3f00 	ldrex	r3, [r3]
 800385e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003866:	653b      	str	r3, [r7, #80]	@ 0x50
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003870:	647b      	str	r3, [r7, #68]	@ 0x44
 8003872:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003874:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003876:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003878:	e841 2300 	strex	r3, r2, [r1]
 800387c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800387e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e6      	bne.n	8003852 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e063      	b.n	8003960 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d149      	bne.n	800393a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ae:	2200      	movs	r2, #0
 80038b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f857 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d03c      	beq.n	800393a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	e853 3f00 	ldrex	r3, [r3]
 80038cc:	623b      	str	r3, [r7, #32]
   return(result);
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038de:	633b      	str	r3, [r7, #48]	@ 0x30
 80038e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e6      	bne.n	80038c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3308      	adds	r3, #8
 80038f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	e853 3f00 	ldrex	r3, [r3]
 8003900:	60fb      	str	r3, [r7, #12]
   return(result);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	64bb      	str	r3, [r7, #72]	@ 0x48
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3308      	adds	r3, #8
 8003910:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003912:	61fa      	str	r2, [r7, #28]
 8003914:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	69b9      	ldr	r1, [r7, #24]
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	617b      	str	r3, [r7, #20]
   return(result);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e5      	bne.n	80038f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e012      	b.n	8003960 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3758      	adds	r7, #88	@ 0x58
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003978:	e04f      	b.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003980:	d04b      	beq.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003982:	f7fd f9b7 	bl	8000cf4 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	429a      	cmp	r2, r3
 8003990:	d302      	bcc.n	8003998 <UART_WaitOnFlagUntilTimeout+0x30>
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e04e      	b.n	8003a3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d037      	beq.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xb2>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b80      	cmp	r3, #128	@ 0x80
 80039ae:	d034      	beq.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xb2>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b40      	cmp	r3, #64	@ 0x40
 80039b4:	d031      	beq.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d110      	bne.n	80039e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2208      	movs	r2, #8
 80039ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f838 	bl	8003a42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2208      	movs	r2, #8
 80039d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e029      	b.n	8003a3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039f4:	d111      	bne.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f81e 	bl	8003a42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e00f      	b.n	8003a3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4013      	ands	r3, r2
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	bf0c      	ite	eq
 8003a2a:	2301      	moveq	r3, #1
 8003a2c:	2300      	movne	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d0a0      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b095      	sub	sp, #84	@ 0x54
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a52:	e853 3f00 	ldrex	r3, [r3]
 8003a56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a68:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a70:	e841 2300 	strex	r3, r2, [r1]
 8003a74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1e6      	bne.n	8003a4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3308      	adds	r3, #8
 8003a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a92:	f023 0301 	bic.w	r3, r3, #1
 8003a96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003aa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003aa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e3      	bne.n	8003a7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d118      	bne.n	8003aee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f023 0310 	bic.w	r3, r3, #16
 8003ad0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	6979      	ldr	r1, [r7, #20]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1e6      	bne.n	8003abc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003b02:	bf00      	nop
 8003b04:	3754      	adds	r7, #84	@ 0x54
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b085      	sub	sp, #20
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_UARTEx_DisableFifoMode+0x16>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e027      	b.n	8003b74 <HAL_UARTEx_DisableFifoMode+0x66>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2224      	movs	r2, #36	@ 0x24
 8003b30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003b52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e02d      	b.n	8003bf4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2224      	movs	r2, #36	@ 0x24
 8003ba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0201 	bic.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f84f 	bl	8003c78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e02d      	b.n	8003c70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	@ 0x24
 8003c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0201 	bic.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f811 	bl	8003c78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d108      	bne.n	8003c9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c98:	e031      	b.n	8003cfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	0e5b      	lsrs	r3, r3, #25
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	0f5b      	lsrs	r3, r3, #29
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003cc2:	7bbb      	ldrb	r3, [r7, #14]
 8003cc4:	7b3a      	ldrb	r2, [r7, #12]
 8003cc6:	4911      	ldr	r1, [pc, #68]	@ (8003d0c <UARTEx_SetNbDataToProcess+0x94>)
 8003cc8:	5c8a      	ldrb	r2, [r1, r2]
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003cce:	7b3a      	ldrb	r2, [r7, #12]
 8003cd0:	490f      	ldr	r1, [pc, #60]	@ (8003d10 <UARTEx_SetNbDataToProcess+0x98>)
 8003cd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003cd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	7b7a      	ldrb	r2, [r7, #13]
 8003ce4:	4909      	ldr	r1, [pc, #36]	@ (8003d0c <UARTEx_SetNbDataToProcess+0x94>)
 8003ce6:	5c8a      	ldrb	r2, [r1, r2]
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003cec:	7b7a      	ldrb	r2, [r7, #13]
 8003cee:	4908      	ldr	r1, [pc, #32]	@ (8003d10 <UARTEx_SetNbDataToProcess+0x98>)
 8003cf0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003cf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003cfe:	bf00      	nop
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	08006a00 	.word	0x08006a00
 8003d10:	08006a08 	.word	0x08006a08

08003d14 <__NVIC_SetPriority>:
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	6039      	str	r1, [r7, #0]
 8003d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	db0a      	blt.n	8003d3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	490c      	ldr	r1, [pc, #48]	@ (8003d60 <__NVIC_SetPriority+0x4c>)
 8003d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d32:	0112      	lsls	r2, r2, #4
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	440b      	add	r3, r1
 8003d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003d3c:	e00a      	b.n	8003d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	4908      	ldr	r1, [pc, #32]	@ (8003d64 <__NVIC_SetPriority+0x50>)
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	3b04      	subs	r3, #4
 8003d4c:	0112      	lsls	r2, r2, #4
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	440b      	add	r3, r1
 8003d52:	761a      	strb	r2, [r3, #24]
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	e000e100 	.word	0xe000e100
 8003d64:	e000ed00 	.word	0xe000ed00

08003d68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003d6c:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <SysTick_Handler+0x1c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003d70:	f001 fd18 	bl	80057a4 <xTaskGetSchedulerState>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d001      	beq.n	8003d7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003d7a:	f002 fb0d 	bl	8006398 <xPortSysTickHandler>
  }
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	e000e010 	.word	0xe000e010

08003d88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	f06f 0004 	mvn.w	r0, #4
 8003d92:	f7ff ffbf 	bl	8003d14 <__NVIC_SetPriority>
#endif
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003da2:	f3ef 8305 	mrs	r3, IPSR
 8003da6:	603b      	str	r3, [r7, #0]
  return(result);
 8003da8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003dae:	f06f 0305 	mvn.w	r3, #5
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	e00c      	b.n	8003dd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003db6:	4b0a      	ldr	r3, [pc, #40]	@ (8003de0 <osKernelInitialize+0x44>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d105      	bne.n	8003dca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003dbe:	4b08      	ldr	r3, [pc, #32]	@ (8003de0 <osKernelInitialize+0x44>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	e002      	b.n	8003dd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003dce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003dd0:	687b      	ldr	r3, [r7, #4]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000180 	.word	0x20000180

08003de4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dea:	f3ef 8305 	mrs	r3, IPSR
 8003dee:	603b      	str	r3, [r7, #0]
  return(result);
 8003df0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <osKernelStart+0x1a>
    stat = osErrorISR;
 8003df6:	f06f 0305 	mvn.w	r3, #5
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	e010      	b.n	8003e20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <osKernelStart+0x48>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d109      	bne.n	8003e1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e06:	f7ff ffbf 	bl	8003d88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e0a:	4b08      	ldr	r3, [pc, #32]	@ (8003e2c <osKernelStart+0x48>)
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e10:	f001 f87a 	bl	8004f08 <vTaskStartScheduler>
      stat = osOK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	607b      	str	r3, [r7, #4]
 8003e18:	e002      	b.n	8003e20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003e1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e20:	687b      	ldr	r3, [r7, #4]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000180 	.word	0x20000180

08003e30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08e      	sub	sp, #56	@ 0x38
 8003e34:	af04      	add	r7, sp, #16
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e40:	f3ef 8305 	mrs	r3, IPSR
 8003e44:	617b      	str	r3, [r7, #20]
  return(result);
 8003e46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d17e      	bne.n	8003f4a <osThreadNew+0x11a>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d07b      	beq.n	8003f4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003e52:	2380      	movs	r3, #128	@ 0x80
 8003e54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003e56:	2318      	movs	r3, #24
 8003e58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d045      	beq.n	8003ef6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <osThreadNew+0x48>
        name = attr->name;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <osThreadNew+0x6e>
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2b38      	cmp	r3, #56	@ 0x38
 8003e90:	d805      	bhi.n	8003e9e <osThreadNew+0x6e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <osThreadNew+0x72>
        return (NULL);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e054      	b.n	8003f4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	089b      	lsrs	r3, r3, #2
 8003eb0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00e      	beq.n	8003ed8 <osThreadNew+0xa8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2b5b      	cmp	r3, #91	@ 0x5b
 8003ec0:	d90a      	bls.n	8003ed8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d006      	beq.n	8003ed8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <osThreadNew+0xa8>
        mem = 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	e010      	b.n	8003efa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10c      	bne.n	8003efa <osThreadNew+0xca>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d108      	bne.n	8003efa <osThreadNew+0xca>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d104      	bne.n	8003efa <osThreadNew+0xca>
          mem = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	e001      	b.n	8003efa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d110      	bne.n	8003f22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f08:	9202      	str	r2, [sp, #8]
 8003f0a:	9301      	str	r3, [sp, #4]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6a3a      	ldr	r2, [r7, #32]
 8003f14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fe1a 	bl	8004b50 <xTaskCreateStatic>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	e013      	b.n	8003f4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d110      	bne.n	8003f4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	f107 0310 	add.w	r3, r7, #16
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fe68 	bl	8004c10 <xTaskCreate>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d001      	beq.n	8003f4a <osThreadNew+0x11a>
            hTask = NULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f4a:	693b      	ldr	r3, [r7, #16]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3728      	adds	r7, #40	@ 0x28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f5c:	f3ef 8305 	mrs	r3, IPSR
 8003f60:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <osDelay+0x1c>
    stat = osErrorISR;
 8003f68:	f06f 0305 	mvn.w	r3, #5
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	e007      	b.n	8003f80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 ff8e 	bl	8004e9c <vTaskDelay>
    }
  }

  return (stat);
 8003f80:	68fb      	ldr	r3, [r7, #12]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4a07      	ldr	r2, [pc, #28]	@ (8003fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4a06      	ldr	r2, [pc, #24]	@ (8003fbc <vApplicationGetIdleTaskMemory+0x30>)
 8003fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2280      	movs	r2, #128	@ 0x80
 8003fa8:	601a      	str	r2, [r3, #0]
}
 8003faa:	bf00      	nop
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000184 	.word	0x20000184
 8003fbc:	200001e0 	.word	0x200001e0

08003fc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4a07      	ldr	r2, [pc, #28]	@ (8003fec <vApplicationGetTimerTaskMemory+0x2c>)
 8003fd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4a06      	ldr	r2, [pc, #24]	@ (8003ff0 <vApplicationGetTimerTaskMemory+0x30>)
 8003fd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fde:	601a      	str	r2, [r3, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	200003e0 	.word	0x200003e0
 8003ff0:	2000043c 	.word	0x2000043c

08003ff4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f103 0208 	add.w	r2, r3, #8
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800400c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f103 0208 	add.w	r2, r3, #8
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f103 0208 	add.w	r2, r3, #8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	601a      	str	r2, [r3, #0]
}
 800408a:	bf00      	nop
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040ac:	d103      	bne.n	80040b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e00c      	b.n	80040d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3308      	adds	r3, #8
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	e002      	b.n	80040c4 <vListInsert+0x2e>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d2f6      	bcs.n	80040be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	601a      	str	r2, [r3, #0]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6892      	ldr	r2, [r2, #8]
 800411e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6852      	ldr	r2, [r2, #4]
 8004128:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	d103      	bne.n	800413c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	1e5a      	subs	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10b      	bne.n	8004188 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004182:	bf00      	nop
 8004184:	bf00      	nop
 8004186:	e7fd      	b.n	8004184 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004188:	f002 f876 	bl	8006278 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004194:	68f9      	ldr	r1, [r7, #12]
 8004196:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	441a      	add	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b8:	3b01      	subs	r3, #1
 80041ba:	68f9      	ldr	r1, [r7, #12]
 80041bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	441a      	add	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	22ff      	movs	r2, #255	@ 0xff
 80041cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	22ff      	movs	r2, #255	@ 0xff
 80041d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d114      	bne.n	8004208 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01a      	beq.n	800421c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3310      	adds	r3, #16
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 f91a 	bl	8005424 <xTaskRemoveFromEventList>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d012      	beq.n	800421c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041f6:	4b0d      	ldr	r3, [pc, #52]	@ (800422c <xQueueGenericReset+0xd0>)
 80041f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	e009      	b.n	800421c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3310      	adds	r3, #16
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff fef1 	bl	8003ff4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3324      	adds	r3, #36	@ 0x24
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff feec 	bl	8003ff4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800421c:	f002 f85e 	bl	80062dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004220:	2301      	movs	r3, #1
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	e000ed04 	.word	0xe000ed04

08004230 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08e      	sub	sp, #56	@ 0x38
 8004234:	af02      	add	r7, sp, #8
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10b      	bne.n	800427a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop
 8004278:	e7fd      	b.n	8004276 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <xQueueGenericCreateStatic+0x56>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <xQueueGenericCreateStatic+0x5a>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <xQueueGenericCreateStatic+0x5c>
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10b      	bne.n	80042a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	623b      	str	r3, [r7, #32]
}
 80042a2:	bf00      	nop
 80042a4:	bf00      	nop
 80042a6:	e7fd      	b.n	80042a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <xQueueGenericCreateStatic+0x84>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <xQueueGenericCreateStatic+0x88>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <xQueueGenericCreateStatic+0x8a>
 80042b8:	2300      	movs	r3, #0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10b      	bne.n	80042d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	61fb      	str	r3, [r7, #28]
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	e7fd      	b.n	80042d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042d6:	2350      	movs	r3, #80	@ 0x50
 80042d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b50      	cmp	r3, #80	@ 0x50
 80042de:	d00b      	beq.n	80042f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	61bb      	str	r3, [r7, #24]
}
 80042f2:	bf00      	nop
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80042f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80042fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00d      	beq.n	8004320 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800430c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f805 	bl	800432a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004322:	4618      	mov	r0, r3
 8004324:	3730      	adds	r7, #48	@ 0x30
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	607a      	str	r2, [r7, #4]
 8004336:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d103      	bne.n	8004346 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	e002      	b.n	800434c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004358:	2101      	movs	r1, #1
 800435a:	69b8      	ldr	r0, [r7, #24]
 800435c:	f7ff fefe 	bl	800415c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004368:	bf00      	nop
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08e      	sub	sp, #56	@ 0x38
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800437e:	2300      	movs	r3, #0
 8004380:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <xQueueGenericSend+0x34>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800439e:	bf00      	nop
 80043a0:	bf00      	nop
 80043a2:	e7fd      	b.n	80043a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d103      	bne.n	80043b2 <xQueueGenericSend+0x42>
 80043aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <xQueueGenericSend+0x46>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <xQueueGenericSend+0x48>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10b      	bne.n	80043d4 <xQueueGenericSend+0x64>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80043ce:	bf00      	nop
 80043d0:	bf00      	nop
 80043d2:	e7fd      	b.n	80043d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d103      	bne.n	80043e2 <xQueueGenericSend+0x72>
 80043da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <xQueueGenericSend+0x76>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <xQueueGenericSend+0x78>
 80043e6:	2300      	movs	r3, #0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <xQueueGenericSend+0x94>
	__asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	623b      	str	r3, [r7, #32]
}
 80043fe:	bf00      	nop
 8004400:	bf00      	nop
 8004402:	e7fd      	b.n	8004400 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004404:	f001 f9ce 	bl	80057a4 <xTaskGetSchedulerState>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <xQueueGenericSend+0xa4>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <xQueueGenericSend+0xa8>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <xQueueGenericSend+0xaa>
 8004418:	2300      	movs	r3, #0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10b      	bne.n	8004436 <xQueueGenericSend+0xc6>
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	61fb      	str	r3, [r7, #28]
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	e7fd      	b.n	8004432 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004436:	f001 ff1f 	bl	8006278 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800443a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800443e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004442:	429a      	cmp	r2, r3
 8004444:	d302      	bcc.n	800444c <xQueueGenericSend+0xdc>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d129      	bne.n	80044a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004452:	f000 fa0f 	bl	8004874 <prvCopyDataToQueue>
 8004456:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	2b00      	cmp	r3, #0
 800445e:	d010      	beq.n	8004482 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	3324      	adds	r3, #36	@ 0x24
 8004464:	4618      	mov	r0, r3
 8004466:	f000 ffdd 	bl	8005424 <xTaskRemoveFromEventList>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d013      	beq.n	8004498 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004470:	4b3f      	ldr	r3, [pc, #252]	@ (8004570 <xQueueGenericSend+0x200>)
 8004472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	e00a      	b.n	8004498 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004488:	4b39      	ldr	r3, [pc, #228]	@ (8004570 <xQueueGenericSend+0x200>)
 800448a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004498:	f001 ff20 	bl	80062dc <vPortExitCritical>
				return pdPASS;
 800449c:	2301      	movs	r3, #1
 800449e:	e063      	b.n	8004568 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d103      	bne.n	80044ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044a6:	f001 ff19 	bl	80062dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e05c      	b.n	8004568 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d106      	bne.n	80044c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044b4:	f107 0314 	add.w	r3, r7, #20
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 f817 	bl	80054ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044be:	2301      	movs	r3, #1
 80044c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044c2:	f001 ff0b 	bl	80062dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044c6:	f000 fd87 	bl	8004fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044ca:	f001 fed5 	bl	8006278 <vPortEnterCritical>
 80044ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044d4:	b25b      	sxtb	r3, r3
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044da:	d103      	bne.n	80044e4 <xQueueGenericSend+0x174>
 80044dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044ea:	b25b      	sxtb	r3, r3
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044f0:	d103      	bne.n	80044fa <xQueueGenericSend+0x18a>
 80044f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044fa:	f001 feef 	bl	80062dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044fe:	1d3a      	adds	r2, r7, #4
 8004500:	f107 0314 	add.w	r3, r7, #20
 8004504:	4611      	mov	r1, r2
 8004506:	4618      	mov	r0, r3
 8004508:	f001 f806 	bl	8005518 <xTaskCheckForTimeOut>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d124      	bne.n	800455c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004512:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004514:	f000 faa6 	bl	8004a64 <prvIsQueueFull>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d018      	beq.n	8004550 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800451e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004520:	3310      	adds	r3, #16
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	4611      	mov	r1, r2
 8004526:	4618      	mov	r0, r3
 8004528:	f000 ff2a 	bl	8005380 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800452c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800452e:	f000 fa31 	bl	8004994 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004532:	f000 fd5f 	bl	8004ff4 <xTaskResumeAll>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	f47f af7c 	bne.w	8004436 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800453e:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <xQueueGenericSend+0x200>)
 8004540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	e772      	b.n	8004436 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004550:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004552:	f000 fa1f 	bl	8004994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004556:	f000 fd4d 	bl	8004ff4 <xTaskResumeAll>
 800455a:	e76c      	b.n	8004436 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800455c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800455e:	f000 fa19 	bl	8004994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004562:	f000 fd47 	bl	8004ff4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004566:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004568:	4618      	mov	r0, r3
 800456a:	3738      	adds	r7, #56	@ 0x38
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	e000ed04 	.word	0xe000ed04

08004574 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b090      	sub	sp, #64	@ 0x40
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10b      	bne.n	80045a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800459e:	bf00      	nop
 80045a0:	bf00      	nop
 80045a2:	e7fd      	b.n	80045a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d103      	bne.n	80045b2 <xQueueGenericSendFromISR+0x3e>
 80045aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <xQueueGenericSendFromISR+0x42>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <xQueueGenericSendFromISR+0x44>
 80045b6:	2300      	movs	r3, #0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10b      	bne.n	80045d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045ce:	bf00      	nop
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d103      	bne.n	80045e2 <xQueueGenericSendFromISR+0x6e>
 80045da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <xQueueGenericSendFromISR+0x72>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <xQueueGenericSendFromISR+0x74>
 80045e6:	2300      	movs	r3, #0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	623b      	str	r3, [r7, #32]
}
 80045fe:	bf00      	nop
 8004600:	bf00      	nop
 8004602:	e7fd      	b.n	8004600 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004604:	f001 ff18 	bl	8006438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004608:	f3ef 8211 	mrs	r2, BASEPRI
 800460c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	61fa      	str	r2, [r7, #28]
 800461e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004620:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004622:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004626:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462c:	429a      	cmp	r2, r3
 800462e:	d302      	bcc.n	8004636 <xQueueGenericSendFromISR+0xc2>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d12f      	bne.n	8004696 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004638:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800463c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800464c:	f000 f912 	bl	8004874 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004650:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004654:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004658:	d112      	bne.n	8004680 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800465a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465e:	2b00      	cmp	r3, #0
 8004660:	d016      	beq.n	8004690 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004664:	3324      	adds	r3, #36	@ 0x24
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fedc 	bl	8005424 <xTaskRemoveFromEventList>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00e      	beq.n	8004690 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00b      	beq.n	8004690 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	e007      	b.n	8004690 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004680:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004684:	3301      	adds	r3, #1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	b25a      	sxtb	r2, r3
 800468a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004690:	2301      	movs	r3, #1
 8004692:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004694:	e001      	b.n	800469a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004696:	2300      	movs	r3, #0
 8004698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800469a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3740      	adds	r7, #64	@ 0x40
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08c      	sub	sp, #48	@ 0x30
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046bc:	2300      	movs	r3, #0
 80046be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10b      	bne.n	80046e2 <xQueueReceive+0x32>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	623b      	str	r3, [r7, #32]
}
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	e7fd      	b.n	80046de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d103      	bne.n	80046f0 <xQueueReceive+0x40>
 80046e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <xQueueReceive+0x44>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <xQueueReceive+0x46>
 80046f4:	2300      	movs	r3, #0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10b      	bne.n	8004712 <xQueueReceive+0x62>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	61fb      	str	r3, [r7, #28]
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	e7fd      	b.n	800470e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004712:	f001 f847 	bl	80057a4 <xTaskGetSchedulerState>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <xQueueReceive+0x72>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <xQueueReceive+0x76>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <xQueueReceive+0x78>
 8004726:	2300      	movs	r3, #0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10b      	bne.n	8004744 <xQueueReceive+0x94>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	61bb      	str	r3, [r7, #24]
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	e7fd      	b.n	8004740 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004744:	f001 fd98 	bl	8006278 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01f      	beq.n	8004794 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004758:	f000 f8f6 	bl	8004948 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	1e5a      	subs	r2, r3, #1
 8004760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004762:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00f      	beq.n	800478c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800476c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476e:	3310      	adds	r3, #16
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fe57 	bl	8005424 <xTaskRemoveFromEventList>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800477c:	4b3c      	ldr	r3, [pc, #240]	@ (8004870 <xQueueReceive+0x1c0>)
 800477e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800478c:	f001 fda6 	bl	80062dc <vPortExitCritical>
				return pdPASS;
 8004790:	2301      	movs	r3, #1
 8004792:	e069      	b.n	8004868 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800479a:	f001 fd9f 	bl	80062dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800479e:	2300      	movs	r3, #0
 80047a0:	e062      	b.n	8004868 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d106      	bne.n	80047b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047a8:	f107 0310 	add.w	r3, r7, #16
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fe9d 	bl	80054ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047b2:	2301      	movs	r3, #1
 80047b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047b6:	f001 fd91 	bl	80062dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047ba:	f000 fc0d 	bl	8004fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047be:	f001 fd5b 	bl	8006278 <vPortEnterCritical>
 80047c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047c8:	b25b      	sxtb	r3, r3
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047ce:	d103      	bne.n	80047d8 <xQueueReceive+0x128>
 80047d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047de:	b25b      	sxtb	r3, r3
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047e4:	d103      	bne.n	80047ee <xQueueReceive+0x13e>
 80047e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047ee:	f001 fd75 	bl	80062dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047f2:	1d3a      	adds	r2, r7, #4
 80047f4:	f107 0310 	add.w	r3, r7, #16
 80047f8:	4611      	mov	r1, r2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fe8c 	bl	8005518 <xTaskCheckForTimeOut>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d123      	bne.n	800484e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004808:	f000 f916 	bl	8004a38 <prvIsQueueEmpty>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d017      	beq.n	8004842 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004814:	3324      	adds	r3, #36	@ 0x24
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	4611      	mov	r1, r2
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fdb0 	bl	8005380 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004820:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004822:	f000 f8b7 	bl	8004994 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004826:	f000 fbe5 	bl	8004ff4 <xTaskResumeAll>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d189      	bne.n	8004744 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004830:	4b0f      	ldr	r3, [pc, #60]	@ (8004870 <xQueueReceive+0x1c0>)
 8004832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	e780      	b.n	8004744 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004842:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004844:	f000 f8a6 	bl	8004994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004848:	f000 fbd4 	bl	8004ff4 <xTaskResumeAll>
 800484c:	e77a      	b.n	8004744 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800484e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004850:	f000 f8a0 	bl	8004994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004854:	f000 fbce 	bl	8004ff4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004858:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800485a:	f000 f8ed 	bl	8004a38 <prvIsQueueEmpty>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	f43f af6f 	beq.w	8004744 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004866:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004868:	4618      	mov	r0, r3
 800486a:	3730      	adds	r7, #48	@ 0x30
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	e000ed04 	.word	0xe000ed04

08004874 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004888:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10d      	bne.n	80048ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d14d      	bne.n	8004936 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 ff9e 	bl	80057e0 <xTaskPriorityDisinherit>
 80048a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	e043      	b.n	8004936 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d119      	bne.n	80048e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6858      	ldr	r0, [r3, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048bc:	461a      	mov	r2, r3
 80048be:	68b9      	ldr	r1, [r7, #8]
 80048c0:	f002 f816 	bl	80068f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048cc:	441a      	add	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d32b      	bcc.n	8004936 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	e026      	b.n	8004936 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	68d8      	ldr	r0, [r3, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f0:	461a      	mov	r2, r3
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	f001 fffc 	bl	80068f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004900:	425b      	negs	r3, r3
 8004902:	441a      	add	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d207      	bcs.n	8004924 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491c:	425b      	negs	r3, r3
 800491e:	441a      	add	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d105      	bne.n	8004936 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	3b01      	subs	r3, #1
 8004934:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800493e:	697b      	ldr	r3, [r7, #20]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d018      	beq.n	800498c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004962:	441a      	add	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	429a      	cmp	r2, r3
 8004972:	d303      	bcc.n	800497c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68d9      	ldr	r1, [r3, #12]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004984:	461a      	mov	r2, r3
 8004986:	6838      	ldr	r0, [r7, #0]
 8004988:	f001 ffb2 	bl	80068f0 <memcpy>
	}
}
 800498c:	bf00      	nop
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800499c:	f001 fc6c 	bl	8006278 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049a8:	e011      	b.n	80049ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d012      	beq.n	80049d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3324      	adds	r3, #36	@ 0x24
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fd34 	bl	8005424 <xTaskRemoveFromEventList>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049c2:	f000 fe0d 	bl	80055e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	dce9      	bgt.n	80049aa <prvUnlockQueue+0x16>
 80049d6:	e000      	b.n	80049da <prvUnlockQueue+0x46>
					break;
 80049d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	22ff      	movs	r2, #255	@ 0xff
 80049de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80049e2:	f001 fc7b 	bl	80062dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049e6:	f001 fc47 	bl	8006278 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049f2:	e011      	b.n	8004a18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d012      	beq.n	8004a22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3310      	adds	r3, #16
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fd0f 	bl	8005424 <xTaskRemoveFromEventList>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a0c:	f000 fde8 	bl	80055e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a10:	7bbb      	ldrb	r3, [r7, #14]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	dce9      	bgt.n	80049f4 <prvUnlockQueue+0x60>
 8004a20:	e000      	b.n	8004a24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	22ff      	movs	r2, #255	@ 0xff
 8004a28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004a2c:	f001 fc56 	bl	80062dc <vPortExitCritical>
}
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a40:	f001 fc1a 	bl	8006278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e001      	b.n	8004a56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a56:	f001 fc41 	bl	80062dc <vPortExitCritical>

	return xReturn;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a6c:	f001 fc04 	bl	8006278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d102      	bne.n	8004a82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	e001      	b.n	8004a86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a86:	f001 fc29 	bl	80062dc <vPortExitCritical>

	return xReturn;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	e014      	b.n	8004ace <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8004ae4 <vQueueAddToRegistry+0x50>)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10b      	bne.n	8004ac8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ab0:	490c      	ldr	r1, [pc, #48]	@ (8004ae4 <vQueueAddToRegistry+0x50>)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004aba:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae4 <vQueueAddToRegistry+0x50>)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ac6:	e006      	b.n	8004ad6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b07      	cmp	r3, #7
 8004ad2:	d9e7      	bls.n	8004aa4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	2000083c 	.word	0x2000083c

08004ae8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004af8:	f001 fbbe 	bl	8006278 <vPortEnterCritical>
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b02:	b25b      	sxtb	r3, r3
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b08:	d103      	bne.n	8004b12 <vQueueWaitForMessageRestricted+0x2a>
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b18:	b25b      	sxtb	r3, r3
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b1e:	d103      	bne.n	8004b28 <vQueueWaitForMessageRestricted+0x40>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b28:	f001 fbd8 	bl	80062dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d106      	bne.n	8004b42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	3324      	adds	r3, #36	@ 0x24
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fc45 	bl	80053cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b42:	6978      	ldr	r0, [r7, #20]
 8004b44:	f7ff ff26 	bl	8004994 <prvUnlockQueue>
	}
 8004b48:	bf00      	nop
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08e      	sub	sp, #56	@ 0x38
 8004b54:	af04      	add	r7, sp, #16
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10b      	bne.n	8004b7c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	623b      	str	r3, [r7, #32]
}
 8004b76:	bf00      	nop
 8004b78:	bf00      	nop
 8004b7a:	e7fd      	b.n	8004b78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10b      	bne.n	8004b9a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	61fb      	str	r3, [r7, #28]
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	e7fd      	b.n	8004b96 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b9a:	235c      	movs	r3, #92	@ 0x5c
 8004b9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b5c      	cmp	r3, #92	@ 0x5c
 8004ba2:	d00b      	beq.n	8004bbc <xTaskCreateStatic+0x6c>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	61bb      	str	r3, [r7, #24]
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	e7fd      	b.n	8004bb8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004bbc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01e      	beq.n	8004c02 <xTaskCreateStatic+0xb2>
 8004bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01b      	beq.n	8004c02 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bd2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bdc:	2300      	movs	r3, #0
 8004bde:	9303      	str	r3, [sp, #12]
 8004be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be2:	9302      	str	r3, [sp, #8]
 8004be4:	f107 0314 	add.w	r3, r7, #20
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	68b9      	ldr	r1, [r7, #8]
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 f850 	bl	8004c9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bfa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bfc:	f000 f8de 	bl	8004dbc <prvAddNewTaskToReadyList>
 8004c00:	e001      	b.n	8004c06 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c06:	697b      	ldr	r3, [r7, #20]
	}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3728      	adds	r7, #40	@ 0x28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08c      	sub	sp, #48	@ 0x30
 8004c14:	af04      	add	r7, sp, #16
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c20:	88fb      	ldrh	r3, [r7, #6]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f001 fc49 	bl	80064bc <pvPortMalloc>
 8004c2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00e      	beq.n	8004c50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c32:	205c      	movs	r0, #92	@ 0x5c
 8004c34:	f001 fc42 	bl	80064bc <pvPortMalloc>
 8004c38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c46:	e005      	b.n	8004c54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c48:	6978      	ldr	r0, [r7, #20]
 8004c4a:	f001 fd05 	bl	8006658 <vPortFree>
 8004c4e:	e001      	b.n	8004c54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d017      	beq.n	8004c8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	2300      	movs	r3, #0
 8004c66:	9303      	str	r3, [sp, #12]
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	9302      	str	r3, [sp, #8]
 8004c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6e:	9301      	str	r3, [sp, #4]
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f80e 	bl	8004c9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c7e:	69f8      	ldr	r0, [r7, #28]
 8004c80:	f000 f89c 	bl	8004dbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c84:	2301      	movs	r3, #1
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	e002      	b.n	8004c90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c90:	69bb      	ldr	r3, [r7, #24]
	}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3720      	adds	r7, #32
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b088      	sub	sp, #32
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	607a      	str	r2, [r7, #4]
 8004ca6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004caa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	21a5      	movs	r1, #165	@ 0xa5
 8004cb4:	f001 fdf0 	bl	8006898 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	f023 0307 	bic.w	r3, r3, #7
 8004cd0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00b      	beq.n	8004cf4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	617b      	str	r3, [r7, #20]
}
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
 8004cf2:	e7fd      	b.n	8004cf0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01f      	beq.n	8004d3a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	e012      	b.n	8004d26 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	4413      	add	r3, r2
 8004d06:	7819      	ldrb	r1, [r3, #0]
 8004d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3334      	adds	r3, #52	@ 0x34
 8004d10:	460a      	mov	r2, r1
 8004d12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	4413      	add	r3, r2
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d006      	beq.n	8004d2e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	3301      	adds	r3, #1
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	2b0f      	cmp	r3, #15
 8004d2a:	d9e9      	bls.n	8004d00 <prvInitialiseNewTask+0x66>
 8004d2c:	e000      	b.n	8004d30 <prvInitialiseNewTask+0x96>
			{
				break;
 8004d2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d38:	e003      	b.n	8004d42 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d44:	2b37      	cmp	r3, #55	@ 0x37
 8004d46:	d901      	bls.n	8004d4c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d48:	2337      	movs	r3, #55	@ 0x37
 8004d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d50:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d56:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d60:	3304      	adds	r3, #4
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff f966 	bl	8004034 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	3318      	adds	r3, #24
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff f961 	bl	8004034 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d86:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	69b8      	ldr	r0, [r7, #24]
 8004d9c:	f001 f93e 	bl	800601c <pxPortInitialiseStack>
 8004da0:	4602      	mov	r2, r0
 8004da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004db2:	bf00      	nop
 8004db4:	3720      	adds	r7, #32
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dc4:	f001 fa58 	bl	8006278 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8004e80 <prvAddNewTaskToReadyList+0xc4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	4a2c      	ldr	r2, [pc, #176]	@ (8004e80 <prvAddNewTaskToReadyList+0xc4>)
 8004dd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8004e84 <prvAddNewTaskToReadyList+0xc8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dda:	4a2a      	ldr	r2, [pc, #168]	@ (8004e84 <prvAddNewTaskToReadyList+0xc8>)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004de0:	4b27      	ldr	r3, [pc, #156]	@ (8004e80 <prvAddNewTaskToReadyList+0xc4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d110      	bne.n	8004e0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004de8:	f000 fc1e 	bl	8005628 <prvInitialiseTaskLists>
 8004dec:	e00d      	b.n	8004e0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dee:	4b26      	ldr	r3, [pc, #152]	@ (8004e88 <prvAddNewTaskToReadyList+0xcc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004df6:	4b23      	ldr	r3, [pc, #140]	@ (8004e84 <prvAddNewTaskToReadyList+0xc8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d802      	bhi.n	8004e0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e04:	4a1f      	ldr	r2, [pc, #124]	@ (8004e84 <prvAddNewTaskToReadyList+0xc8>)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e0a:	4b20      	ldr	r3, [pc, #128]	@ (8004e8c <prvAddNewTaskToReadyList+0xd0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	4a1e      	ldr	r2, [pc, #120]	@ (8004e8c <prvAddNewTaskToReadyList+0xd0>)
 8004e12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e14:	4b1d      	ldr	r3, [pc, #116]	@ (8004e8c <prvAddNewTaskToReadyList+0xd0>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e20:	4b1b      	ldr	r3, [pc, #108]	@ (8004e90 <prvAddNewTaskToReadyList+0xd4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d903      	bls.n	8004e30 <prvAddNewTaskToReadyList+0x74>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	4a18      	ldr	r2, [pc, #96]	@ (8004e90 <prvAddNewTaskToReadyList+0xd4>)
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4a15      	ldr	r2, [pc, #84]	@ (8004e94 <prvAddNewTaskToReadyList+0xd8>)
 8004e3e:	441a      	add	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f7ff f901 	bl	800404e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e4c:	f001 fa46 	bl	80062dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e50:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <prvAddNewTaskToReadyList+0xcc>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00e      	beq.n	8004e76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e58:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <prvAddNewTaskToReadyList+0xc8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d207      	bcs.n	8004e76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e66:	4b0c      	ldr	r3, [pc, #48]	@ (8004e98 <prvAddNewTaskToReadyList+0xdc>)
 8004e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000d50 	.word	0x20000d50
 8004e84:	2000087c 	.word	0x2000087c
 8004e88:	20000d5c 	.word	0x20000d5c
 8004e8c:	20000d6c 	.word	0x20000d6c
 8004e90:	20000d58 	.word	0x20000d58
 8004e94:	20000880 	.word	0x20000880
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d018      	beq.n	8004ee0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004eae:	4b14      	ldr	r3, [pc, #80]	@ (8004f00 <vTaskDelay+0x64>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <vTaskDelay+0x32>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	60bb      	str	r3, [r7, #8]
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	e7fd      	b.n	8004eca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ece:	f000 f883 	bl	8004fd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fcf3 	bl	80058c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004eda:	f000 f88b 	bl	8004ff4 <xTaskResumeAll>
 8004ede:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d107      	bne.n	8004ef6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004ee6:	4b07      	ldr	r3, [pc, #28]	@ (8004f04 <vTaskDelay+0x68>)
 8004ee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000d78 	.word	0x20000d78
 8004f04:	e000ed04 	.word	0xe000ed04

08004f08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	@ 0x28
 8004f0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f16:	463a      	mov	r2, r7
 8004f18:	1d39      	adds	r1, r7, #4
 8004f1a:	f107 0308 	add.w	r3, r7, #8
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff f834 	bl	8003f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	9202      	str	r2, [sp, #8]
 8004f2c:	9301      	str	r3, [sp, #4]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	2300      	movs	r3, #0
 8004f34:	460a      	mov	r2, r1
 8004f36:	4922      	ldr	r1, [pc, #136]	@ (8004fc0 <vTaskStartScheduler+0xb8>)
 8004f38:	4822      	ldr	r0, [pc, #136]	@ (8004fc4 <vTaskStartScheduler+0xbc>)
 8004f3a:	f7ff fe09 	bl	8004b50 <xTaskCreateStatic>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4a21      	ldr	r2, [pc, #132]	@ (8004fc8 <vTaskStartScheduler+0xc0>)
 8004f42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f44:	4b20      	ldr	r3, [pc, #128]	@ (8004fc8 <vTaskStartScheduler+0xc0>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	e001      	b.n	8004f56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d102      	bne.n	8004f62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f5c:	f000 fd04 	bl	8005968 <xTimerCreateTimerTask>
 8004f60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d116      	bne.n	8004f96 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	613b      	str	r3, [r7, #16]
}
 8004f7a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f7c:	4b13      	ldr	r3, [pc, #76]	@ (8004fcc <vTaskStartScheduler+0xc4>)
 8004f7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f84:	4b12      	ldr	r3, [pc, #72]	@ (8004fd0 <vTaskStartScheduler+0xc8>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f8a:	4b12      	ldr	r3, [pc, #72]	@ (8004fd4 <vTaskStartScheduler+0xcc>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f90:	f001 f8ce 	bl	8006130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f94:	e00f      	b.n	8004fb6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f9c:	d10b      	bne.n	8004fb6 <vTaskStartScheduler+0xae>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	60fb      	str	r3, [r7, #12]
}
 8004fb0:	bf00      	nop
 8004fb2:	bf00      	nop
 8004fb4:	e7fd      	b.n	8004fb2 <vTaskStartScheduler+0xaa>
}
 8004fb6:	bf00      	nop
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	0800694c 	.word	0x0800694c
 8004fc4:	080055f9 	.word	0x080055f9
 8004fc8:	20000d74 	.word	0x20000d74
 8004fcc:	20000d70 	.word	0x20000d70
 8004fd0:	20000d5c 	.word	0x20000d5c
 8004fd4:	20000d54 	.word	0x20000d54

08004fd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004fdc:	4b04      	ldr	r3, [pc, #16]	@ (8004ff0 <vTaskSuspendAll+0x18>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	4a03      	ldr	r2, [pc, #12]	@ (8004ff0 <vTaskSuspendAll+0x18>)
 8004fe4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004fe6:	bf00      	nop
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	20000d78 	.word	0x20000d78

08004ff4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ffe:	2300      	movs	r3, #0
 8005000:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005002:	4b42      	ldr	r3, [pc, #264]	@ (800510c <xTaskResumeAll+0x118>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10b      	bne.n	8005022 <xTaskResumeAll+0x2e>
	__asm volatile
 800500a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	603b      	str	r3, [r7, #0]
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	e7fd      	b.n	800501e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005022:	f001 f929 	bl	8006278 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005026:	4b39      	ldr	r3, [pc, #228]	@ (800510c <xTaskResumeAll+0x118>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3b01      	subs	r3, #1
 800502c:	4a37      	ldr	r2, [pc, #220]	@ (800510c <xTaskResumeAll+0x118>)
 800502e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005030:	4b36      	ldr	r3, [pc, #216]	@ (800510c <xTaskResumeAll+0x118>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d162      	bne.n	80050fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005038:	4b35      	ldr	r3, [pc, #212]	@ (8005110 <xTaskResumeAll+0x11c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d05e      	beq.n	80050fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005040:	e02f      	b.n	80050a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005042:	4b34      	ldr	r3, [pc, #208]	@ (8005114 <xTaskResumeAll+0x120>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3318      	adds	r3, #24
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff f85a 	bl	8004108 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3304      	adds	r3, #4
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff f855 	bl	8004108 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005062:	4b2d      	ldr	r3, [pc, #180]	@ (8005118 <xTaskResumeAll+0x124>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d903      	bls.n	8005072 <xTaskResumeAll+0x7e>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506e:	4a2a      	ldr	r2, [pc, #168]	@ (8005118 <xTaskResumeAll+0x124>)
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4a27      	ldr	r2, [pc, #156]	@ (800511c <xTaskResumeAll+0x128>)
 8005080:	441a      	add	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3304      	adds	r3, #4
 8005086:	4619      	mov	r1, r3
 8005088:	4610      	mov	r0, r2
 800508a:	f7fe ffe0 	bl	800404e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005092:	4b23      	ldr	r3, [pc, #140]	@ (8005120 <xTaskResumeAll+0x12c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	429a      	cmp	r2, r3
 800509a:	d302      	bcc.n	80050a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800509c:	4b21      	ldr	r3, [pc, #132]	@ (8005124 <xTaskResumeAll+0x130>)
 800509e:	2201      	movs	r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005114 <xTaskResumeAll+0x120>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1cb      	bne.n	8005042 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050b0:	f000 fb58 	bl	8005764 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005128 <xTaskResumeAll+0x134>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d010      	beq.n	80050e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050c0:	f000 f846 	bl	8005150 <xTaskIncrementTick>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80050ca:	4b16      	ldr	r3, [pc, #88]	@ (8005124 <xTaskResumeAll+0x130>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1f1      	bne.n	80050c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80050dc:	4b12      	ldr	r3, [pc, #72]	@ (8005128 <xTaskResumeAll+0x134>)
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050e2:	4b10      	ldr	r3, [pc, #64]	@ (8005124 <xTaskResumeAll+0x130>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050ea:	2301      	movs	r3, #1
 80050ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050ee:	4b0f      	ldr	r3, [pc, #60]	@ (800512c <xTaskResumeAll+0x138>)
 80050f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050fe:	f001 f8ed 	bl	80062dc <vPortExitCritical>

	return xAlreadyYielded;
 8005102:	68bb      	ldr	r3, [r7, #8]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	20000d78 	.word	0x20000d78
 8005110:	20000d50 	.word	0x20000d50
 8005114:	20000d10 	.word	0x20000d10
 8005118:	20000d58 	.word	0x20000d58
 800511c:	20000880 	.word	0x20000880
 8005120:	2000087c 	.word	0x2000087c
 8005124:	20000d64 	.word	0x20000d64
 8005128:	20000d60 	.word	0x20000d60
 800512c:	e000ed04 	.word	0xe000ed04

08005130 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005136:	4b05      	ldr	r3, [pc, #20]	@ (800514c <xTaskGetTickCount+0x1c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800513c:	687b      	ldr	r3, [r7, #4]
}
 800513e:	4618      	mov	r0, r3
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	20000d54 	.word	0x20000d54

08005150 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800515a:	4b4f      	ldr	r3, [pc, #316]	@ (8005298 <xTaskIncrementTick+0x148>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	f040 8090 	bne.w	8005284 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005164:	4b4d      	ldr	r3, [pc, #308]	@ (800529c <xTaskIncrementTick+0x14c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3301      	adds	r3, #1
 800516a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800516c:	4a4b      	ldr	r2, [pc, #300]	@ (800529c <xTaskIncrementTick+0x14c>)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d121      	bne.n	80051bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005178:	4b49      	ldr	r3, [pc, #292]	@ (80052a0 <xTaskIncrementTick+0x150>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00b      	beq.n	800519a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	603b      	str	r3, [r7, #0]
}
 8005194:	bf00      	nop
 8005196:	bf00      	nop
 8005198:	e7fd      	b.n	8005196 <xTaskIncrementTick+0x46>
 800519a:	4b41      	ldr	r3, [pc, #260]	@ (80052a0 <xTaskIncrementTick+0x150>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	4b40      	ldr	r3, [pc, #256]	@ (80052a4 <xTaskIncrementTick+0x154>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a3e      	ldr	r2, [pc, #248]	@ (80052a0 <xTaskIncrementTick+0x150>)
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	4a3e      	ldr	r2, [pc, #248]	@ (80052a4 <xTaskIncrementTick+0x154>)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	4b3e      	ldr	r3, [pc, #248]	@ (80052a8 <xTaskIncrementTick+0x158>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3301      	adds	r3, #1
 80051b4:	4a3c      	ldr	r2, [pc, #240]	@ (80052a8 <xTaskIncrementTick+0x158>)
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	f000 fad4 	bl	8005764 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051bc:	4b3b      	ldr	r3, [pc, #236]	@ (80052ac <xTaskIncrementTick+0x15c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d349      	bcc.n	800525a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051c6:	4b36      	ldr	r3, [pc, #216]	@ (80052a0 <xTaskIncrementTick+0x150>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d104      	bne.n	80051da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051d0:	4b36      	ldr	r3, [pc, #216]	@ (80052ac <xTaskIncrementTick+0x15c>)
 80051d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051d6:	601a      	str	r2, [r3, #0]
					break;
 80051d8:	e03f      	b.n	800525a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051da:	4b31      	ldr	r3, [pc, #196]	@ (80052a0 <xTaskIncrementTick+0x150>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d203      	bcs.n	80051fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051f2:	4a2e      	ldr	r2, [pc, #184]	@ (80052ac <xTaskIncrementTick+0x15c>)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051f8:	e02f      	b.n	800525a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	3304      	adds	r3, #4
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fe ff82 	bl	8004108 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	3318      	adds	r3, #24
 8005210:	4618      	mov	r0, r3
 8005212:	f7fe ff79 	bl	8004108 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800521a:	4b25      	ldr	r3, [pc, #148]	@ (80052b0 <xTaskIncrementTick+0x160>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d903      	bls.n	800522a <xTaskIncrementTick+0xda>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005226:	4a22      	ldr	r2, [pc, #136]	@ (80052b0 <xTaskIncrementTick+0x160>)
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4a1f      	ldr	r2, [pc, #124]	@ (80052b4 <xTaskIncrementTick+0x164>)
 8005238:	441a      	add	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	3304      	adds	r3, #4
 800523e:	4619      	mov	r1, r3
 8005240:	4610      	mov	r0, r2
 8005242:	f7fe ff04 	bl	800404e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800524a:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <xTaskIncrementTick+0x168>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005250:	429a      	cmp	r2, r3
 8005252:	d3b8      	bcc.n	80051c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005254:	2301      	movs	r3, #1
 8005256:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005258:	e7b5      	b.n	80051c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800525a:	4b17      	ldr	r3, [pc, #92]	@ (80052b8 <xTaskIncrementTick+0x168>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005260:	4914      	ldr	r1, [pc, #80]	@ (80052b4 <xTaskIncrementTick+0x164>)
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d901      	bls.n	8005276 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005272:	2301      	movs	r3, #1
 8005274:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005276:	4b11      	ldr	r3, [pc, #68]	@ (80052bc <xTaskIncrementTick+0x16c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800527e:	2301      	movs	r3, #1
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	e004      	b.n	800528e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005284:	4b0e      	ldr	r3, [pc, #56]	@ (80052c0 <xTaskIncrementTick+0x170>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3301      	adds	r3, #1
 800528a:	4a0d      	ldr	r2, [pc, #52]	@ (80052c0 <xTaskIncrementTick+0x170>)
 800528c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800528e:	697b      	ldr	r3, [r7, #20]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20000d78 	.word	0x20000d78
 800529c:	20000d54 	.word	0x20000d54
 80052a0:	20000d08 	.word	0x20000d08
 80052a4:	20000d0c 	.word	0x20000d0c
 80052a8:	20000d68 	.word	0x20000d68
 80052ac:	20000d70 	.word	0x20000d70
 80052b0:	20000d58 	.word	0x20000d58
 80052b4:	20000880 	.word	0x20000880
 80052b8:	2000087c 	.word	0x2000087c
 80052bc:	20000d64 	.word	0x20000d64
 80052c0:	20000d60 	.word	0x20000d60

080052c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052ca:	4b28      	ldr	r3, [pc, #160]	@ (800536c <vTaskSwitchContext+0xa8>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052d2:	4b27      	ldr	r3, [pc, #156]	@ (8005370 <vTaskSwitchContext+0xac>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052d8:	e042      	b.n	8005360 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80052da:	4b25      	ldr	r3, [pc, #148]	@ (8005370 <vTaskSwitchContext+0xac>)
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052e0:	4b24      	ldr	r3, [pc, #144]	@ (8005374 <vTaskSwitchContext+0xb0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	e011      	b.n	800530c <vTaskSwitchContext+0x48>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10b      	bne.n	8005306 <vTaskSwitchContext+0x42>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	607b      	str	r3, [r7, #4]
}
 8005300:	bf00      	nop
 8005302:	bf00      	nop
 8005304:	e7fd      	b.n	8005302 <vTaskSwitchContext+0x3e>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3b01      	subs	r3, #1
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	491a      	ldr	r1, [pc, #104]	@ (8005378 <vTaskSwitchContext+0xb4>)
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0e3      	beq.n	80052e8 <vTaskSwitchContext+0x24>
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4a13      	ldr	r2, [pc, #76]	@ (8005378 <vTaskSwitchContext+0xb4>)
 800532c:	4413      	add	r3, r2
 800532e:	60bb      	str	r3, [r7, #8]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	605a      	str	r2, [r3, #4]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	3308      	adds	r3, #8
 8005342:	429a      	cmp	r2, r3
 8005344:	d104      	bne.n	8005350 <vTaskSwitchContext+0x8c>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	605a      	str	r2, [r3, #4]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	4a09      	ldr	r2, [pc, #36]	@ (800537c <vTaskSwitchContext+0xb8>)
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	4a06      	ldr	r2, [pc, #24]	@ (8005374 <vTaskSwitchContext+0xb0>)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6013      	str	r3, [r2, #0]
}
 8005360:	bf00      	nop
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	20000d78 	.word	0x20000d78
 8005370:	20000d64 	.word	0x20000d64
 8005374:	20000d58 	.word	0x20000d58
 8005378:	20000880 	.word	0x20000880
 800537c:	2000087c 	.word	0x2000087c

08005380 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10b      	bne.n	80053a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	60fb      	str	r3, [r7, #12]
}
 80053a2:	bf00      	nop
 80053a4:	bf00      	nop
 80053a6:	e7fd      	b.n	80053a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053a8:	4b07      	ldr	r3, [pc, #28]	@ (80053c8 <vTaskPlaceOnEventList+0x48>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3318      	adds	r3, #24
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7fe fe70 	bl	8004096 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053b6:	2101      	movs	r1, #1
 80053b8:	6838      	ldr	r0, [r7, #0]
 80053ba:	f000 fa81 	bl	80058c0 <prvAddCurrentTaskToDelayedList>
}
 80053be:	bf00      	nop
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	2000087c 	.word	0x2000087c

080053cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10b      	bne.n	80053f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	617b      	str	r3, [r7, #20]
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	e7fd      	b.n	80053f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005420 <vTaskPlaceOnEventListRestricted+0x54>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3318      	adds	r3, #24
 80053fc:	4619      	mov	r1, r3
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7fe fe25 	bl	800404e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800540a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800540e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	68b8      	ldr	r0, [r7, #8]
 8005414:	f000 fa54 	bl	80058c0 <prvAddCurrentTaskToDelayedList>
	}
 8005418:	bf00      	nop
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	2000087c 	.word	0x2000087c

08005424 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10b      	bne.n	8005452 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	60fb      	str	r3, [r7, #12]
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	e7fd      	b.n	800544e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	3318      	adds	r3, #24
 8005456:	4618      	mov	r0, r3
 8005458:	f7fe fe56 	bl	8004108 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800545c:	4b1d      	ldr	r3, [pc, #116]	@ (80054d4 <xTaskRemoveFromEventList+0xb0>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d11d      	bne.n	80054a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	3304      	adds	r3, #4
 8005468:	4618      	mov	r0, r3
 800546a:	f7fe fe4d 	bl	8004108 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005472:	4b19      	ldr	r3, [pc, #100]	@ (80054d8 <xTaskRemoveFromEventList+0xb4>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d903      	bls.n	8005482 <xTaskRemoveFromEventList+0x5e>
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547e:	4a16      	ldr	r2, [pc, #88]	@ (80054d8 <xTaskRemoveFromEventList+0xb4>)
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005486:	4613      	mov	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4a13      	ldr	r2, [pc, #76]	@ (80054dc <xTaskRemoveFromEventList+0xb8>)
 8005490:	441a      	add	r2, r3
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3304      	adds	r3, #4
 8005496:	4619      	mov	r1, r3
 8005498:	4610      	mov	r0, r2
 800549a:	f7fe fdd8 	bl	800404e <vListInsertEnd>
 800549e:	e005      	b.n	80054ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	3318      	adds	r3, #24
 80054a4:	4619      	mov	r1, r3
 80054a6:	480e      	ldr	r0, [pc, #56]	@ (80054e0 <xTaskRemoveFromEventList+0xbc>)
 80054a8:	f7fe fdd1 	bl	800404e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b0:	4b0c      	ldr	r3, [pc, #48]	@ (80054e4 <xTaskRemoveFromEventList+0xc0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d905      	bls.n	80054c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054be:	4b0a      	ldr	r3, [pc, #40]	@ (80054e8 <xTaskRemoveFromEventList+0xc4>)
 80054c0:	2201      	movs	r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e001      	b.n	80054ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80054c6:	2300      	movs	r3, #0
 80054c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80054ca:	697b      	ldr	r3, [r7, #20]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20000d78 	.word	0x20000d78
 80054d8:	20000d58 	.word	0x20000d58
 80054dc:	20000880 	.word	0x20000880
 80054e0:	20000d10 	.word	0x20000d10
 80054e4:	2000087c 	.word	0x2000087c
 80054e8:	20000d64 	.word	0x20000d64

080054ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054f4:	4b06      	ldr	r3, [pc, #24]	@ (8005510 <vTaskInternalSetTimeOutState+0x24>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80054fc:	4b05      	ldr	r3, [pc, #20]	@ (8005514 <vTaskInternalSetTimeOutState+0x28>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	605a      	str	r2, [r3, #4]
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	20000d68 	.word	0x20000d68
 8005514:	20000d54 	.word	0x20000d54

08005518 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10b      	bne.n	8005540 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	613b      	str	r3, [r7, #16]
}
 800553a:	bf00      	nop
 800553c:	bf00      	nop
 800553e:	e7fd      	b.n	800553c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10b      	bne.n	800555e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	60fb      	str	r3, [r7, #12]
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	e7fd      	b.n	800555a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800555e:	f000 fe8b 	bl	8006278 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005562:	4b1d      	ldr	r3, [pc, #116]	@ (80055d8 <xTaskCheckForTimeOut+0xc0>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800557a:	d102      	bne.n	8005582 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800557c:	2300      	movs	r3, #0
 800557e:	61fb      	str	r3, [r7, #28]
 8005580:	e023      	b.n	80055ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	4b15      	ldr	r3, [pc, #84]	@ (80055dc <xTaskCheckForTimeOut+0xc4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d007      	beq.n	800559e <xTaskCheckForTimeOut+0x86>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	429a      	cmp	r2, r3
 8005596:	d302      	bcc.n	800559e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005598:	2301      	movs	r3, #1
 800559a:	61fb      	str	r3, [r7, #28]
 800559c:	e015      	b.n	80055ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d20b      	bcs.n	80055c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	1ad2      	subs	r2, r2, r3
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff ff99 	bl	80054ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
 80055be:	e004      	b.n	80055ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055c6:	2301      	movs	r3, #1
 80055c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055ca:	f000 fe87 	bl	80062dc <vPortExitCritical>

	return xReturn;
 80055ce:	69fb      	ldr	r3, [r7, #28]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3720      	adds	r7, #32
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	20000d54 	.word	0x20000d54
 80055dc:	20000d68 	.word	0x20000d68

080055e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055e4:	4b03      	ldr	r3, [pc, #12]	@ (80055f4 <vTaskMissedYield+0x14>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
}
 80055ea:	bf00      	nop
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	20000d64 	.word	0x20000d64

080055f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005600:	f000 f852 	bl	80056a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005604:	4b06      	ldr	r3, [pc, #24]	@ (8005620 <prvIdleTask+0x28>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d9f9      	bls.n	8005600 <prvIdleTask+0x8>
			{
				taskYIELD();
 800560c:	4b05      	ldr	r3, [pc, #20]	@ (8005624 <prvIdleTask+0x2c>)
 800560e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800561c:	e7f0      	b.n	8005600 <prvIdleTask+0x8>
 800561e:	bf00      	nop
 8005620:	20000880 	.word	0x20000880
 8005624:	e000ed04 	.word	0xe000ed04

08005628 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800562e:	2300      	movs	r3, #0
 8005630:	607b      	str	r3, [r7, #4]
 8005632:	e00c      	b.n	800564e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4a12      	ldr	r2, [pc, #72]	@ (8005688 <prvInitialiseTaskLists+0x60>)
 8005640:	4413      	add	r3, r2
 8005642:	4618      	mov	r0, r3
 8005644:	f7fe fcd6 	bl	8003ff4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3301      	adds	r3, #1
 800564c:	607b      	str	r3, [r7, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b37      	cmp	r3, #55	@ 0x37
 8005652:	d9ef      	bls.n	8005634 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005654:	480d      	ldr	r0, [pc, #52]	@ (800568c <prvInitialiseTaskLists+0x64>)
 8005656:	f7fe fccd 	bl	8003ff4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800565a:	480d      	ldr	r0, [pc, #52]	@ (8005690 <prvInitialiseTaskLists+0x68>)
 800565c:	f7fe fcca 	bl	8003ff4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005660:	480c      	ldr	r0, [pc, #48]	@ (8005694 <prvInitialiseTaskLists+0x6c>)
 8005662:	f7fe fcc7 	bl	8003ff4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005666:	480c      	ldr	r0, [pc, #48]	@ (8005698 <prvInitialiseTaskLists+0x70>)
 8005668:	f7fe fcc4 	bl	8003ff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800566c:	480b      	ldr	r0, [pc, #44]	@ (800569c <prvInitialiseTaskLists+0x74>)
 800566e:	f7fe fcc1 	bl	8003ff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005672:	4b0b      	ldr	r3, [pc, #44]	@ (80056a0 <prvInitialiseTaskLists+0x78>)
 8005674:	4a05      	ldr	r2, [pc, #20]	@ (800568c <prvInitialiseTaskLists+0x64>)
 8005676:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005678:	4b0a      	ldr	r3, [pc, #40]	@ (80056a4 <prvInitialiseTaskLists+0x7c>)
 800567a:	4a05      	ldr	r2, [pc, #20]	@ (8005690 <prvInitialiseTaskLists+0x68>)
 800567c:	601a      	str	r2, [r3, #0]
}
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000880 	.word	0x20000880
 800568c:	20000ce0 	.word	0x20000ce0
 8005690:	20000cf4 	.word	0x20000cf4
 8005694:	20000d10 	.word	0x20000d10
 8005698:	20000d24 	.word	0x20000d24
 800569c:	20000d3c 	.word	0x20000d3c
 80056a0:	20000d08 	.word	0x20000d08
 80056a4:	20000d0c 	.word	0x20000d0c

080056a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056ae:	e019      	b.n	80056e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056b0:	f000 fde2 	bl	8006278 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b4:	4b10      	ldr	r3, [pc, #64]	@ (80056f8 <prvCheckTasksWaitingTermination+0x50>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3304      	adds	r3, #4
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fe fd21 	bl	8004108 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056c6:	4b0d      	ldr	r3, [pc, #52]	@ (80056fc <prvCheckTasksWaitingTermination+0x54>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	4a0b      	ldr	r2, [pc, #44]	@ (80056fc <prvCheckTasksWaitingTermination+0x54>)
 80056ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <prvCheckTasksWaitingTermination+0x58>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005700 <prvCheckTasksWaitingTermination+0x58>)
 80056d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056da:	f000 fdff 	bl	80062dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f810 	bl	8005704 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056e4:	4b06      	ldr	r3, [pc, #24]	@ (8005700 <prvCheckTasksWaitingTermination+0x58>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e1      	bne.n	80056b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056ec:	bf00      	nop
 80056ee:	bf00      	nop
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000d24 	.word	0x20000d24
 80056fc:	20000d50 	.word	0x20000d50
 8005700:	20000d38 	.word	0x20000d38

08005704 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005712:	2b00      	cmp	r3, #0
 8005714:	d108      	bne.n	8005728 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571a:	4618      	mov	r0, r3
 800571c:	f000 ff9c 	bl	8006658 <vPortFree>
				vPortFree( pxTCB );
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 ff99 	bl	8006658 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005726:	e019      	b.n	800575c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800572e:	2b01      	cmp	r3, #1
 8005730:	d103      	bne.n	800573a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 ff90 	bl	8006658 <vPortFree>
	}
 8005738:	e010      	b.n	800575c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005740:	2b02      	cmp	r3, #2
 8005742:	d00b      	beq.n	800575c <prvDeleteTCB+0x58>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	60fb      	str	r3, [r7, #12]
}
 8005756:	bf00      	nop
 8005758:	bf00      	nop
 800575a:	e7fd      	b.n	8005758 <prvDeleteTCB+0x54>
	}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800576a:	4b0c      	ldr	r3, [pc, #48]	@ (800579c <prvResetNextTaskUnblockTime+0x38>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d104      	bne.n	800577e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005774:	4b0a      	ldr	r3, [pc, #40]	@ (80057a0 <prvResetNextTaskUnblockTime+0x3c>)
 8005776:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800577a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800577c:	e008      	b.n	8005790 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800577e:	4b07      	ldr	r3, [pc, #28]	@ (800579c <prvResetNextTaskUnblockTime+0x38>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	4a04      	ldr	r2, [pc, #16]	@ (80057a0 <prvResetNextTaskUnblockTime+0x3c>)
 800578e:	6013      	str	r3, [r2, #0]
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	20000d08 	.word	0x20000d08
 80057a0:	20000d70 	.word	0x20000d70

080057a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057aa:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <xTaskGetSchedulerState+0x34>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d102      	bne.n	80057b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057b2:	2301      	movs	r3, #1
 80057b4:	607b      	str	r3, [r7, #4]
 80057b6:	e008      	b.n	80057ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b8:	4b08      	ldr	r3, [pc, #32]	@ (80057dc <xTaskGetSchedulerState+0x38>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d102      	bne.n	80057c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057c0:	2302      	movs	r3, #2
 80057c2:	607b      	str	r3, [r7, #4]
 80057c4:	e001      	b.n	80057ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057c6:	2300      	movs	r3, #0
 80057c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057ca:	687b      	ldr	r3, [r7, #4]
	}
 80057cc:	4618      	mov	r0, r3
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	20000d5c 	.word	0x20000d5c
 80057dc:	20000d78 	.word	0x20000d78

080057e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d058      	beq.n	80058a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80057f6:	4b2f      	ldr	r3, [pc, #188]	@ (80058b4 <xTaskPriorityDisinherit+0xd4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d00b      	beq.n	8005818 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	60fb      	str	r3, [r7, #12]
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	e7fd      	b.n	8005814 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10b      	bne.n	8005838 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	60bb      	str	r3, [r7, #8]
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	e7fd      	b.n	8005834 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800583c:	1e5a      	subs	r2, r3, #1
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800584a:	429a      	cmp	r2, r3
 800584c:	d02c      	beq.n	80058a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005852:	2b00      	cmp	r3, #0
 8005854:	d128      	bne.n	80058a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	3304      	adds	r3, #4
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe fc54 	bl	8004108 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005878:	4b0f      	ldr	r3, [pc, #60]	@ (80058b8 <xTaskPriorityDisinherit+0xd8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d903      	bls.n	8005888 <xTaskPriorityDisinherit+0xa8>
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005884:	4a0c      	ldr	r2, [pc, #48]	@ (80058b8 <xTaskPriorityDisinherit+0xd8>)
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4a09      	ldr	r2, [pc, #36]	@ (80058bc <xTaskPriorityDisinherit+0xdc>)
 8005896:	441a      	add	r2, r3
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	3304      	adds	r3, #4
 800589c:	4619      	mov	r1, r3
 800589e:	4610      	mov	r0, r2
 80058a0:	f7fe fbd5 	bl	800404e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058a4:	2301      	movs	r3, #1
 80058a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058a8:	697b      	ldr	r3, [r7, #20]
	}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	2000087c 	.word	0x2000087c
 80058b8:	20000d58 	.word	0x20000d58
 80058bc:	20000880 	.word	0x20000880

080058c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80058ca:	4b21      	ldr	r3, [pc, #132]	@ (8005950 <prvAddCurrentTaskToDelayedList+0x90>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058d0:	4b20      	ldr	r3, [pc, #128]	@ (8005954 <prvAddCurrentTaskToDelayedList+0x94>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3304      	adds	r3, #4
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fe fc16 	bl	8004108 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058e2:	d10a      	bne.n	80058fa <prvAddCurrentTaskToDelayedList+0x3a>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005954 <prvAddCurrentTaskToDelayedList+0x94>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3304      	adds	r3, #4
 80058f0:	4619      	mov	r1, r3
 80058f2:	4819      	ldr	r0, [pc, #100]	@ (8005958 <prvAddCurrentTaskToDelayedList+0x98>)
 80058f4:	f7fe fbab 	bl	800404e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058f8:	e026      	b.n	8005948 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4413      	add	r3, r2
 8005900:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005902:	4b14      	ldr	r3, [pc, #80]	@ (8005954 <prvAddCurrentTaskToDelayedList+0x94>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	429a      	cmp	r2, r3
 8005910:	d209      	bcs.n	8005926 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005912:	4b12      	ldr	r3, [pc, #72]	@ (800595c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4b0f      	ldr	r3, [pc, #60]	@ (8005954 <prvAddCurrentTaskToDelayedList+0x94>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3304      	adds	r3, #4
 800591c:	4619      	mov	r1, r3
 800591e:	4610      	mov	r0, r2
 8005920:	f7fe fbb9 	bl	8004096 <vListInsert>
}
 8005924:	e010      	b.n	8005948 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005926:	4b0e      	ldr	r3, [pc, #56]	@ (8005960 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b0a      	ldr	r3, [pc, #40]	@ (8005954 <prvAddCurrentTaskToDelayedList+0x94>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3304      	adds	r3, #4
 8005930:	4619      	mov	r1, r3
 8005932:	4610      	mov	r0, r2
 8005934:	f7fe fbaf 	bl	8004096 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005938:	4b0a      	ldr	r3, [pc, #40]	@ (8005964 <prvAddCurrentTaskToDelayedList+0xa4>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	429a      	cmp	r2, r3
 8005940:	d202      	bcs.n	8005948 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005942:	4a08      	ldr	r2, [pc, #32]	@ (8005964 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	6013      	str	r3, [r2, #0]
}
 8005948:	bf00      	nop
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000d54 	.word	0x20000d54
 8005954:	2000087c 	.word	0x2000087c
 8005958:	20000d3c 	.word	0x20000d3c
 800595c:	20000d0c 	.word	0x20000d0c
 8005960:	20000d08 	.word	0x20000d08
 8005964:	20000d70 	.word	0x20000d70

08005968 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	@ 0x28
 800596c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800596e:	2300      	movs	r3, #0
 8005970:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005972:	f000 fb13 	bl	8005f9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005976:	4b1d      	ldr	r3, [pc, #116]	@ (80059ec <xTimerCreateTimerTask+0x84>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d021      	beq.n	80059c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005982:	2300      	movs	r3, #0
 8005984:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005986:	1d3a      	adds	r2, r7, #4
 8005988:	f107 0108 	add.w	r1, r7, #8
 800598c:	f107 030c 	add.w	r3, r7, #12
 8005990:	4618      	mov	r0, r3
 8005992:	f7fe fb15 	bl	8003fc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	9202      	str	r2, [sp, #8]
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	2302      	movs	r3, #2
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	2300      	movs	r3, #0
 80059a6:	460a      	mov	r2, r1
 80059a8:	4911      	ldr	r1, [pc, #68]	@ (80059f0 <xTimerCreateTimerTask+0x88>)
 80059aa:	4812      	ldr	r0, [pc, #72]	@ (80059f4 <xTimerCreateTimerTask+0x8c>)
 80059ac:	f7ff f8d0 	bl	8004b50 <xTaskCreateStatic>
 80059b0:	4603      	mov	r3, r0
 80059b2:	4a11      	ldr	r2, [pc, #68]	@ (80059f8 <xTimerCreateTimerTask+0x90>)
 80059b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80059b6:	4b10      	ldr	r3, [pc, #64]	@ (80059f8 <xTimerCreateTimerTask+0x90>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80059be:	2301      	movs	r3, #1
 80059c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10b      	bne.n	80059e0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	613b      	str	r3, [r7, #16]
}
 80059da:	bf00      	nop
 80059dc:	bf00      	nop
 80059de:	e7fd      	b.n	80059dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80059e0:	697b      	ldr	r3, [r7, #20]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	20000dac 	.word	0x20000dac
 80059f0:	08006954 	.word	0x08006954
 80059f4:	08005b35 	.word	0x08005b35
 80059f8:	20000db0 	.word	0x20000db0

080059fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	@ 0x28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10b      	bne.n	8005a2c <xTimerGenericCommand+0x30>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	623b      	str	r3, [r7, #32]
}
 8005a26:	bf00      	nop
 8005a28:	bf00      	nop
 8005a2a:	e7fd      	b.n	8005a28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a2c:	4b19      	ldr	r3, [pc, #100]	@ (8005a94 <xTimerGenericCommand+0x98>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d02a      	beq.n	8005a8a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b05      	cmp	r3, #5
 8005a44:	dc18      	bgt.n	8005a78 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a46:	f7ff fead 	bl	80057a4 <xTaskGetSchedulerState>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d109      	bne.n	8005a64 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a50:	4b10      	ldr	r3, [pc, #64]	@ (8005a94 <xTimerGenericCommand+0x98>)
 8005a52:	6818      	ldr	r0, [r3, #0]
 8005a54:	f107 0110 	add.w	r1, r7, #16
 8005a58:	2300      	movs	r3, #0
 8005a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a5c:	f7fe fc88 	bl	8004370 <xQueueGenericSend>
 8005a60:	6278      	str	r0, [r7, #36]	@ 0x24
 8005a62:	e012      	b.n	8005a8a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a64:	4b0b      	ldr	r3, [pc, #44]	@ (8005a94 <xTimerGenericCommand+0x98>)
 8005a66:	6818      	ldr	r0, [r3, #0]
 8005a68:	f107 0110 	add.w	r1, r7, #16
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f7fe fc7e 	bl	8004370 <xQueueGenericSend>
 8005a74:	6278      	str	r0, [r7, #36]	@ 0x24
 8005a76:	e008      	b.n	8005a8a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a78:	4b06      	ldr	r3, [pc, #24]	@ (8005a94 <xTimerGenericCommand+0x98>)
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	f107 0110 	add.w	r1, r7, #16
 8005a80:	2300      	movs	r3, #0
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	f7fe fd76 	bl	8004574 <xQueueGenericSendFromISR>
 8005a88:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3728      	adds	r7, #40	@ 0x28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20000dac 	.word	0x20000dac

08005a98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b088      	sub	sp, #32
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa2:	4b23      	ldr	r3, [pc, #140]	@ (8005b30 <prvProcessExpiredTimer+0x98>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fe fb29 	bl	8004108 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d023      	beq.n	8005b0c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	699a      	ldr	r2, [r3, #24]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	18d1      	adds	r1, r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	6978      	ldr	r0, [r7, #20]
 8005ad2:	f000 f8d5 	bl	8005c80 <prvInsertTimerInActiveList>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d020      	beq.n	8005b1e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005adc:	2300      	movs	r3, #0
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	6978      	ldr	r0, [r7, #20]
 8005ae8:	f7ff ff88 	bl	80059fc <xTimerGenericCommand>
 8005aec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d114      	bne.n	8005b1e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	60fb      	str	r3, [r7, #12]
}
 8005b06:	bf00      	nop
 8005b08:	bf00      	nop
 8005b0a:	e7fd      	b.n	8005b08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b12:	f023 0301 	bic.w	r3, r3, #1
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	6978      	ldr	r0, [r7, #20]
 8005b24:	4798      	blx	r3
}
 8005b26:	bf00      	nop
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000da4 	.word	0x20000da4

08005b34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b3c:	f107 0308 	add.w	r3, r7, #8
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 f859 	bl	8005bf8 <prvGetNextExpireTime>
 8005b46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f805 	bl	8005b5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b52:	f000 f8d7 	bl	8005d04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b56:	bf00      	nop
 8005b58:	e7f0      	b.n	8005b3c <prvTimerTask+0x8>
	...

08005b5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b66:	f7ff fa37 	bl	8004fd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b6a:	f107 0308 	add.w	r3, r7, #8
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f866 	bl	8005c40 <prvSampleTimeNow>
 8005b74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d130      	bne.n	8005bde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10a      	bne.n	8005b98 <prvProcessTimerOrBlockTask+0x3c>
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d806      	bhi.n	8005b98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b8a:	f7ff fa33 	bl	8004ff4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b8e:	68f9      	ldr	r1, [r7, #12]
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff ff81 	bl	8005a98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b96:	e024      	b.n	8005be2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d008      	beq.n	8005bb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b9e:	4b13      	ldr	r3, [pc, #76]	@ (8005bec <prvProcessTimerOrBlockTask+0x90>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <prvProcessTimerOrBlockTask+0x50>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <prvProcessTimerOrBlockTask+0x52>
 8005bac:	2300      	movs	r3, #0
 8005bae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf0 <prvProcessTimerOrBlockTask+0x94>)
 8005bb2:	6818      	ldr	r0, [r3, #0]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	f7fe ff93 	bl	8004ae8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005bc2:	f7ff fa17 	bl	8004ff4 <xTaskResumeAll>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005bcc:	4b09      	ldr	r3, [pc, #36]	@ (8005bf4 <prvProcessTimerOrBlockTask+0x98>)
 8005bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	f3bf 8f6f 	isb	sy
}
 8005bdc:	e001      	b.n	8005be2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005bde:	f7ff fa09 	bl	8004ff4 <xTaskResumeAll>
}
 8005be2:	bf00      	nop
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000da8 	.word	0x20000da8
 8005bf0:	20000dac 	.word	0x20000dac
 8005bf4:	e000ed04 	.word	0xe000ed04

08005bf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c00:	4b0e      	ldr	r3, [pc, #56]	@ (8005c3c <prvGetNextExpireTime+0x44>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <prvGetNextExpireTime+0x16>
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	e000      	b.n	8005c10 <prvGetNextExpireTime+0x18>
 8005c0e:	2200      	movs	r2, #0
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d105      	bne.n	8005c28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c1c:	4b07      	ldr	r3, [pc, #28]	@ (8005c3c <prvGetNextExpireTime+0x44>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	e001      	b.n	8005c2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	20000da4 	.word	0x20000da4

08005c40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c48:	f7ff fa72 	bl	8005130 <xTaskGetTickCount>
 8005c4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c7c <prvSampleTimeNow+0x3c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d205      	bcs.n	8005c64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c58:	f000 f93a 	bl	8005ed0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	e002      	b.n	8005c6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c6a:	4a04      	ldr	r2, [pc, #16]	@ (8005c7c <prvSampleTimeNow+0x3c>)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c70:	68fb      	ldr	r3, [r7, #12]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000db4 	.word	0x20000db4

08005c80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d812      	bhi.n	8005ccc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	1ad2      	subs	r2, r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d302      	bcc.n	8005cba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	e01b      	b.n	8005cf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005cba:	4b10      	ldr	r3, [pc, #64]	@ (8005cfc <prvInsertTimerInActiveList+0x7c>)
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	f7fe f9e6 	bl	8004096 <vListInsert>
 8005cca:	e012      	b.n	8005cf2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d206      	bcs.n	8005ce2 <prvInsertTimerInActiveList+0x62>
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d302      	bcc.n	8005ce2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	e007      	b.n	8005cf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ce2:	4b07      	ldr	r3, [pc, #28]	@ (8005d00 <prvInsertTimerInActiveList+0x80>)
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	4619      	mov	r1, r3
 8005cec:	4610      	mov	r0, r2
 8005cee:	f7fe f9d2 	bl	8004096 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005cf2:	697b      	ldr	r3, [r7, #20]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	20000da8 	.word	0x20000da8
 8005d00:	20000da4 	.word	0x20000da4

08005d04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b08e      	sub	sp, #56	@ 0x38
 8005d08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d0a:	e0ce      	b.n	8005eaa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	da19      	bge.n	8005d46 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d12:	1d3b      	adds	r3, r7, #4
 8005d14:	3304      	adds	r3, #4
 8005d16:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10b      	bne.n	8005d36 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	61fb      	str	r3, [r7, #28]
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	e7fd      	b.n	8005d32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d3c:	6850      	ldr	r0, [r2, #4]
 8005d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d40:	6892      	ldr	r2, [r2, #8]
 8005d42:	4611      	mov	r1, r2
 8005d44:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f2c0 80ae 	blt.w	8005eaa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fe f9d2 	bl	8004108 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d64:	463b      	mov	r3, r7
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff ff6a 	bl	8005c40 <prvSampleTimeNow>
 8005d6c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b09      	cmp	r3, #9
 8005d72:	f200 8097 	bhi.w	8005ea4 <prvProcessReceivedCommands+0x1a0>
 8005d76:	a201      	add	r2, pc, #4	@ (adr r2, 8005d7c <prvProcessReceivedCommands+0x78>)
 8005d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7c:	08005da5 	.word	0x08005da5
 8005d80:	08005da5 	.word	0x08005da5
 8005d84:	08005da5 	.word	0x08005da5
 8005d88:	08005e1b 	.word	0x08005e1b
 8005d8c:	08005e2f 	.word	0x08005e2f
 8005d90:	08005e7b 	.word	0x08005e7b
 8005d94:	08005da5 	.word	0x08005da5
 8005d98:	08005da5 	.word	0x08005da5
 8005d9c:	08005e1b 	.word	0x08005e1b
 8005da0:	08005e2f 	.word	0x08005e2f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	18d1      	adds	r1, r2, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dc4:	f7ff ff5c 	bl	8005c80 <prvInsertTimerInActiveList>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d06c      	beq.n	8005ea8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d061      	beq.n	8005ea8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	441a      	add	r2, r3
 8005dec:	2300      	movs	r3, #0
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	2300      	movs	r3, #0
 8005df2:	2100      	movs	r1, #0
 8005df4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005df6:	f7ff fe01 	bl	80059fc <xTimerGenericCommand>
 8005dfa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d152      	bne.n	8005ea8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	61bb      	str	r3, [r7, #24]
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop
 8005e18:	e7fd      	b.n	8005e16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e20:	f023 0301 	bic.w	r3, r3, #1
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005e2c:	e03d      	b.n	8005eaa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e34:	f043 0301 	orr.w	r3, r3, #1
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e44:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	617b      	str	r3, [r7, #20]
}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	e7fd      	b.n	8005e62 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6c:	18d1      	adds	r1, r2, r3
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e74:	f7ff ff04 	bl	8005c80 <prvInsertTimerInActiveList>
					break;
 8005e78:	e017      	b.n	8005eaa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d103      	bne.n	8005e90 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005e88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e8a:	f000 fbe5 	bl	8006658 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e8e:	e00c      	b.n	8005eaa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e96:	f023 0301 	bic.w	r3, r3, #1
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005ea2:	e002      	b.n	8005eaa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005ea4:	bf00      	nop
 8005ea6:	e000      	b.n	8005eaa <prvProcessReceivedCommands+0x1a6>
					break;
 8005ea8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005eaa:	4b08      	ldr	r3, [pc, #32]	@ (8005ecc <prvProcessReceivedCommands+0x1c8>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	1d39      	adds	r1, r7, #4
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe fbfc 	bl	80046b0 <xQueueReceive>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f47f af26 	bne.w	8005d0c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	3730      	adds	r7, #48	@ 0x30
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000dac 	.word	0x20000dac

08005ed0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ed6:	e049      	b.n	8005f6c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8005f94 <prvSwitchTimerLists+0xc4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8005f94 <prvSwitchTimerLists+0xc4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fe f909 	bl	8004108 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02f      	beq.n	8005f6c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4413      	add	r3, r2
 8005f14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d90e      	bls.n	8005f3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8005f94 <prvSwitchTimerLists+0xc4>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4619      	mov	r1, r3
 8005f34:	4610      	mov	r0, r2
 8005f36:	f7fe f8ae 	bl	8004096 <vListInsert>
 8005f3a:	e017      	b.n	8005f6c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	2300      	movs	r3, #0
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	2100      	movs	r1, #0
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f7ff fd58 	bl	80059fc <xTimerGenericCommand>
 8005f4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10b      	bne.n	8005f6c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	603b      	str	r3, [r7, #0]
}
 8005f66:	bf00      	nop
 8005f68:	bf00      	nop
 8005f6a:	e7fd      	b.n	8005f68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f6c:	4b09      	ldr	r3, [pc, #36]	@ (8005f94 <prvSwitchTimerLists+0xc4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1b0      	bne.n	8005ed8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f76:	4b07      	ldr	r3, [pc, #28]	@ (8005f94 <prvSwitchTimerLists+0xc4>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f7c:	4b06      	ldr	r3, [pc, #24]	@ (8005f98 <prvSwitchTimerLists+0xc8>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a04      	ldr	r2, [pc, #16]	@ (8005f94 <prvSwitchTimerLists+0xc4>)
 8005f82:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f84:	4a04      	ldr	r2, [pc, #16]	@ (8005f98 <prvSwitchTimerLists+0xc8>)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	6013      	str	r3, [r2, #0]
}
 8005f8a:	bf00      	nop
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20000da4 	.word	0x20000da4
 8005f98:	20000da8 	.word	0x20000da8

08005f9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005fa2:	f000 f969 	bl	8006278 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005fa6:	4b15      	ldr	r3, [pc, #84]	@ (8005ffc <prvCheckForValidListAndQueue+0x60>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d120      	bne.n	8005ff0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005fae:	4814      	ldr	r0, [pc, #80]	@ (8006000 <prvCheckForValidListAndQueue+0x64>)
 8005fb0:	f7fe f820 	bl	8003ff4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005fb4:	4813      	ldr	r0, [pc, #76]	@ (8006004 <prvCheckForValidListAndQueue+0x68>)
 8005fb6:	f7fe f81d 	bl	8003ff4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005fba:	4b13      	ldr	r3, [pc, #76]	@ (8006008 <prvCheckForValidListAndQueue+0x6c>)
 8005fbc:	4a10      	ldr	r2, [pc, #64]	@ (8006000 <prvCheckForValidListAndQueue+0x64>)
 8005fbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005fc0:	4b12      	ldr	r3, [pc, #72]	@ (800600c <prvCheckForValidListAndQueue+0x70>)
 8005fc2:	4a10      	ldr	r2, [pc, #64]	@ (8006004 <prvCheckForValidListAndQueue+0x68>)
 8005fc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	4b11      	ldr	r3, [pc, #68]	@ (8006010 <prvCheckForValidListAndQueue+0x74>)
 8005fcc:	4a11      	ldr	r2, [pc, #68]	@ (8006014 <prvCheckForValidListAndQueue+0x78>)
 8005fce:	2110      	movs	r1, #16
 8005fd0:	200a      	movs	r0, #10
 8005fd2:	f7fe f92d 	bl	8004230 <xQueueGenericCreateStatic>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	4a08      	ldr	r2, [pc, #32]	@ (8005ffc <prvCheckForValidListAndQueue+0x60>)
 8005fda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005fdc:	4b07      	ldr	r3, [pc, #28]	@ (8005ffc <prvCheckForValidListAndQueue+0x60>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d005      	beq.n	8005ff0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005fe4:	4b05      	ldr	r3, [pc, #20]	@ (8005ffc <prvCheckForValidListAndQueue+0x60>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	490b      	ldr	r1, [pc, #44]	@ (8006018 <prvCheckForValidListAndQueue+0x7c>)
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fe fd52 	bl	8004a94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ff0:	f000 f974 	bl	80062dc <vPortExitCritical>
}
 8005ff4:	bf00      	nop
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000dac 	.word	0x20000dac
 8006000:	20000d7c 	.word	0x20000d7c
 8006004:	20000d90 	.word	0x20000d90
 8006008:	20000da4 	.word	0x20000da4
 800600c:	20000da8 	.word	0x20000da8
 8006010:	20000e58 	.word	0x20000e58
 8006014:	20000db8 	.word	0x20000db8
 8006018:	0800695c 	.word	0x0800695c

0800601c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3b04      	subs	r3, #4
 800602c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3b04      	subs	r3, #4
 800603a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f023 0201 	bic.w	r2, r3, #1
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3b04      	subs	r3, #4
 800604a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800604c:	4a0c      	ldr	r2, [pc, #48]	@ (8006080 <pxPortInitialiseStack+0x64>)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3b14      	subs	r3, #20
 8006056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3b04      	subs	r3, #4
 8006062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f06f 0202 	mvn.w	r2, #2
 800606a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3b20      	subs	r3, #32
 8006070:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006072:	68fb      	ldr	r3, [r7, #12]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	08006085 	.word	0x08006085

08006084 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800608e:	4b13      	ldr	r3, [pc, #76]	@ (80060dc <prvTaskExitError+0x58>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006096:	d00b      	beq.n	80060b0 <prvTaskExitError+0x2c>
	__asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	60fb      	str	r3, [r7, #12]
}
 80060aa:	bf00      	nop
 80060ac:	bf00      	nop
 80060ae:	e7fd      	b.n	80060ac <prvTaskExitError+0x28>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	60bb      	str	r3, [r7, #8]
}
 80060c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060c4:	bf00      	nop
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0fc      	beq.n	80060c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80060cc:	bf00      	nop
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	2000000c 	.word	0x2000000c

080060e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80060e0:	4b07      	ldr	r3, [pc, #28]	@ (8006100 <pxCurrentTCBConst2>)
 80060e2:	6819      	ldr	r1, [r3, #0]
 80060e4:	6808      	ldr	r0, [r1, #0]
 80060e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	f380 8809 	msr	PSP, r0
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f04f 0000 	mov.w	r0, #0
 80060f6:	f380 8811 	msr	BASEPRI, r0
 80060fa:	4770      	bx	lr
 80060fc:	f3af 8000 	nop.w

08006100 <pxCurrentTCBConst2>:
 8006100:	2000087c 	.word	0x2000087c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop

08006108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006108:	4808      	ldr	r0, [pc, #32]	@ (800612c <prvPortStartFirstTask+0x24>)
 800610a:	6800      	ldr	r0, [r0, #0]
 800610c:	6800      	ldr	r0, [r0, #0]
 800610e:	f380 8808 	msr	MSP, r0
 8006112:	f04f 0000 	mov.w	r0, #0
 8006116:	f380 8814 	msr	CONTROL, r0
 800611a:	b662      	cpsie	i
 800611c:	b661      	cpsie	f
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	df00      	svc	0
 8006128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800612a:	bf00      	nop
 800612c:	e000ed08 	.word	0xe000ed08

08006130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006136:	4b47      	ldr	r3, [pc, #284]	@ (8006254 <xPortStartScheduler+0x124>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a47      	ldr	r2, [pc, #284]	@ (8006258 <xPortStartScheduler+0x128>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d10b      	bne.n	8006158 <xPortStartScheduler+0x28>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	613b      	str	r3, [r7, #16]
}
 8006152:	bf00      	nop
 8006154:	bf00      	nop
 8006156:	e7fd      	b.n	8006154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006158:	4b3e      	ldr	r3, [pc, #248]	@ (8006254 <xPortStartScheduler+0x124>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a3f      	ldr	r2, [pc, #252]	@ (800625c <xPortStartScheduler+0x12c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d10b      	bne.n	800617a <xPortStartScheduler+0x4a>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	60fb      	str	r3, [r7, #12]
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	e7fd      	b.n	8006176 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800617a:	4b39      	ldr	r3, [pc, #228]	@ (8006260 <xPortStartScheduler+0x130>)
 800617c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	b2db      	uxtb	r3, r3
 8006184:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	22ff      	movs	r2, #255	@ 0xff
 800618a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	b2db      	uxtb	r3, r3
 8006192:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006194:	78fb      	ldrb	r3, [r7, #3]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800619c:	b2da      	uxtb	r2, r3
 800619e:	4b31      	ldr	r3, [pc, #196]	@ (8006264 <xPortStartScheduler+0x134>)
 80061a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061a2:	4b31      	ldr	r3, [pc, #196]	@ (8006268 <xPortStartScheduler+0x138>)
 80061a4:	2207      	movs	r2, #7
 80061a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061a8:	e009      	b.n	80061be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80061aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006268 <xPortStartScheduler+0x138>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	4a2d      	ldr	r2, [pc, #180]	@ (8006268 <xPortStartScheduler+0x138>)
 80061b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80061b4:	78fb      	ldrb	r3, [r7, #3]
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061be:	78fb      	ldrb	r3, [r7, #3]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c6:	2b80      	cmp	r3, #128	@ 0x80
 80061c8:	d0ef      	beq.n	80061aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80061ca:	4b27      	ldr	r3, [pc, #156]	@ (8006268 <xPortStartScheduler+0x138>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f1c3 0307 	rsb	r3, r3, #7
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d00b      	beq.n	80061ee <xPortStartScheduler+0xbe>
	__asm volatile
 80061d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	60bb      	str	r3, [r7, #8]
}
 80061e8:	bf00      	nop
 80061ea:	bf00      	nop
 80061ec:	e7fd      	b.n	80061ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006268 <xPortStartScheduler+0x138>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006268 <xPortStartScheduler+0x138>)
 80061f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006268 <xPortStartScheduler+0x138>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006200:	4a19      	ldr	r2, [pc, #100]	@ (8006268 <xPortStartScheduler+0x138>)
 8006202:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	b2da      	uxtb	r2, r3
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800620c:	4b17      	ldr	r3, [pc, #92]	@ (800626c <xPortStartScheduler+0x13c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a16      	ldr	r2, [pc, #88]	@ (800626c <xPortStartScheduler+0x13c>)
 8006212:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006216:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006218:	4b14      	ldr	r3, [pc, #80]	@ (800626c <xPortStartScheduler+0x13c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a13      	ldr	r2, [pc, #76]	@ (800626c <xPortStartScheduler+0x13c>)
 800621e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006222:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006224:	f000 f8da 	bl	80063dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006228:	4b11      	ldr	r3, [pc, #68]	@ (8006270 <xPortStartScheduler+0x140>)
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800622e:	f000 f8f9 	bl	8006424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006232:	4b10      	ldr	r3, [pc, #64]	@ (8006274 <xPortStartScheduler+0x144>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a0f      	ldr	r2, [pc, #60]	@ (8006274 <xPortStartScheduler+0x144>)
 8006238:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800623c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800623e:	f7ff ff63 	bl	8006108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006242:	f7ff f83f 	bl	80052c4 <vTaskSwitchContext>
	prvTaskExitError();
 8006246:	f7ff ff1d 	bl	8006084 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	e000ed00 	.word	0xe000ed00
 8006258:	410fc271 	.word	0x410fc271
 800625c:	410fc270 	.word	0x410fc270
 8006260:	e000e400 	.word	0xe000e400
 8006264:	20000ea8 	.word	0x20000ea8
 8006268:	20000eac 	.word	0x20000eac
 800626c:	e000ed20 	.word	0xe000ed20
 8006270:	2000000c 	.word	0x2000000c
 8006274:	e000ef34 	.word	0xe000ef34

08006278 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	607b      	str	r3, [r7, #4]
}
 8006290:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006292:	4b10      	ldr	r3, [pc, #64]	@ (80062d4 <vPortEnterCritical+0x5c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3301      	adds	r3, #1
 8006298:	4a0e      	ldr	r2, [pc, #56]	@ (80062d4 <vPortEnterCritical+0x5c>)
 800629a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800629c:	4b0d      	ldr	r3, [pc, #52]	@ (80062d4 <vPortEnterCritical+0x5c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d110      	bne.n	80062c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062a4:	4b0c      	ldr	r3, [pc, #48]	@ (80062d8 <vPortEnterCritical+0x60>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00b      	beq.n	80062c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	603b      	str	r3, [r7, #0]
}
 80062c0:	bf00      	nop
 80062c2:	bf00      	nop
 80062c4:	e7fd      	b.n	80062c2 <vPortEnterCritical+0x4a>
	}
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	2000000c 	.word	0x2000000c
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80062e2:	4b12      	ldr	r3, [pc, #72]	@ (800632c <vPortExitCritical+0x50>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10b      	bne.n	8006302 <vPortExitCritical+0x26>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	607b      	str	r3, [r7, #4]
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	e7fd      	b.n	80062fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006302:	4b0a      	ldr	r3, [pc, #40]	@ (800632c <vPortExitCritical+0x50>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3b01      	subs	r3, #1
 8006308:	4a08      	ldr	r2, [pc, #32]	@ (800632c <vPortExitCritical+0x50>)
 800630a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800630c:	4b07      	ldr	r3, [pc, #28]	@ (800632c <vPortExitCritical+0x50>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d105      	bne.n	8006320 <vPortExitCritical+0x44>
 8006314:	2300      	movs	r3, #0
 8006316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f383 8811 	msr	BASEPRI, r3
}
 800631e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	2000000c 	.word	0x2000000c

08006330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006330:	f3ef 8009 	mrs	r0, PSP
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	4b15      	ldr	r3, [pc, #84]	@ (8006390 <pxCurrentTCBConst>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	f01e 0f10 	tst.w	lr, #16
 8006340:	bf08      	it	eq
 8006342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634a:	6010      	str	r0, [r2, #0]
 800634c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006350:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006354:	f380 8811 	msr	BASEPRI, r0
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f7fe ffb0 	bl	80052c4 <vTaskSwitchContext>
 8006364:	f04f 0000 	mov.w	r0, #0
 8006368:	f380 8811 	msr	BASEPRI, r0
 800636c:	bc09      	pop	{r0, r3}
 800636e:	6819      	ldr	r1, [r3, #0]
 8006370:	6808      	ldr	r0, [r1, #0]
 8006372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006376:	f01e 0f10 	tst.w	lr, #16
 800637a:	bf08      	it	eq
 800637c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006380:	f380 8809 	msr	PSP, r0
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	f3af 8000 	nop.w

08006390 <pxCurrentTCBConst>:
 8006390:	2000087c 	.word	0x2000087c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop

08006398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	607b      	str	r3, [r7, #4]
}
 80063b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063b2:	f7fe fecd 	bl	8005150 <xTaskIncrementTick>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063bc:	4b06      	ldr	r3, [pc, #24]	@ (80063d8 <xPortSysTickHandler+0x40>)
 80063be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	2300      	movs	r3, #0
 80063c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	f383 8811 	msr	BASEPRI, r3
}
 80063ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80063d0:	bf00      	nop
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006410 <vPortSetupTimerInterrupt+0x34>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006414 <vPortSetupTimerInterrupt+0x38>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006418 <vPortSetupTimerInterrupt+0x3c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a0a      	ldr	r2, [pc, #40]	@ (800641c <vPortSetupTimerInterrupt+0x40>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	099b      	lsrs	r3, r3, #6
 80063f8:	4a09      	ldr	r2, [pc, #36]	@ (8006420 <vPortSetupTimerInterrupt+0x44>)
 80063fa:	3b01      	subs	r3, #1
 80063fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063fe:	4b04      	ldr	r3, [pc, #16]	@ (8006410 <vPortSetupTimerInterrupt+0x34>)
 8006400:	2207      	movs	r2, #7
 8006402:	601a      	str	r2, [r3, #0]
}
 8006404:	bf00      	nop
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	e000e010 	.word	0xe000e010
 8006414:	e000e018 	.word	0xe000e018
 8006418:	20000000 	.word	0x20000000
 800641c:	10624dd3 	.word	0x10624dd3
 8006420:	e000e014 	.word	0xe000e014

08006424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006424:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006434 <vPortEnableVFP+0x10>
 8006428:	6801      	ldr	r1, [r0, #0]
 800642a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800642e:	6001      	str	r1, [r0, #0]
 8006430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006432:	bf00      	nop
 8006434:	e000ed88 	.word	0xe000ed88

08006438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800643e:	f3ef 8305 	mrs	r3, IPSR
 8006442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b0f      	cmp	r3, #15
 8006448:	d915      	bls.n	8006476 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800644a:	4a18      	ldr	r2, [pc, #96]	@ (80064ac <vPortValidateInterruptPriority+0x74>)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006454:	4b16      	ldr	r3, [pc, #88]	@ (80064b0 <vPortValidateInterruptPriority+0x78>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	7afa      	ldrb	r2, [r7, #11]
 800645a:	429a      	cmp	r2, r3
 800645c:	d20b      	bcs.n	8006476 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	607b      	str	r3, [r7, #4]
}
 8006470:	bf00      	nop
 8006472:	bf00      	nop
 8006474:	e7fd      	b.n	8006472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006476:	4b0f      	ldr	r3, [pc, #60]	@ (80064b4 <vPortValidateInterruptPriority+0x7c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800647e:	4b0e      	ldr	r3, [pc, #56]	@ (80064b8 <vPortValidateInterruptPriority+0x80>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d90b      	bls.n	800649e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	603b      	str	r3, [r7, #0]
}
 8006498:	bf00      	nop
 800649a:	bf00      	nop
 800649c:	e7fd      	b.n	800649a <vPortValidateInterruptPriority+0x62>
	}
 800649e:	bf00      	nop
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	e000e3f0 	.word	0xe000e3f0
 80064b0:	20000ea8 	.word	0x20000ea8
 80064b4:	e000ed0c 	.word	0xe000ed0c
 80064b8:	20000eac 	.word	0x20000eac

080064bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	@ 0x28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064c8:	f7fe fd86 	bl	8004fd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064cc:	4b5c      	ldr	r3, [pc, #368]	@ (8006640 <pvPortMalloc+0x184>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064d4:	f000 f924 	bl	8006720 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064d8:	4b5a      	ldr	r3, [pc, #360]	@ (8006644 <pvPortMalloc+0x188>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4013      	ands	r3, r2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f040 8095 	bne.w	8006610 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d01e      	beq.n	800652a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80064ec:	2208      	movs	r2, #8
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4413      	add	r3, r2
 80064f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f003 0307 	and.w	r3, r3, #7
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d015      	beq.n	800652a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f023 0307 	bic.w	r3, r3, #7
 8006504:	3308      	adds	r3, #8
 8006506:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f003 0307 	and.w	r3, r3, #7
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00b      	beq.n	800652a <pvPortMalloc+0x6e>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	617b      	str	r3, [r7, #20]
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	e7fd      	b.n	8006526 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d06f      	beq.n	8006610 <pvPortMalloc+0x154>
 8006530:	4b45      	ldr	r3, [pc, #276]	@ (8006648 <pvPortMalloc+0x18c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	429a      	cmp	r2, r3
 8006538:	d86a      	bhi.n	8006610 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800653a:	4b44      	ldr	r3, [pc, #272]	@ (800664c <pvPortMalloc+0x190>)
 800653c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800653e:	4b43      	ldr	r3, [pc, #268]	@ (800664c <pvPortMalloc+0x190>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006544:	e004      	b.n	8006550 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800654a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	429a      	cmp	r2, r3
 8006558:	d903      	bls.n	8006562 <pvPortMalloc+0xa6>
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1f1      	bne.n	8006546 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006562:	4b37      	ldr	r3, [pc, #220]	@ (8006640 <pvPortMalloc+0x184>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006568:	429a      	cmp	r2, r3
 800656a:	d051      	beq.n	8006610 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2208      	movs	r2, #8
 8006572:	4413      	add	r3, r2
 8006574:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	1ad2      	subs	r2, r2, r3
 8006586:	2308      	movs	r3, #8
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	429a      	cmp	r2, r3
 800658c:	d920      	bls.n	80065d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800658e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4413      	add	r3, r2
 8006594:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00b      	beq.n	80065b8 <pvPortMalloc+0xfc>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	613b      	str	r3, [r7, #16]
}
 80065b2:	bf00      	nop
 80065b4:	bf00      	nop
 80065b6:	e7fd      	b.n	80065b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	1ad2      	subs	r2, r2, r3
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065ca:	69b8      	ldr	r0, [r7, #24]
 80065cc:	f000 f90a 	bl	80067e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006648 <pvPortMalloc+0x18c>)
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	4a1b      	ldr	r2, [pc, #108]	@ (8006648 <pvPortMalloc+0x18c>)
 80065dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065de:	4b1a      	ldr	r3, [pc, #104]	@ (8006648 <pvPortMalloc+0x18c>)
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006650 <pvPortMalloc+0x194>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d203      	bcs.n	80065f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065ea:	4b17      	ldr	r3, [pc, #92]	@ (8006648 <pvPortMalloc+0x18c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a18      	ldr	r2, [pc, #96]	@ (8006650 <pvPortMalloc+0x194>)
 80065f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	4b13      	ldr	r3, [pc, #76]	@ (8006644 <pvPortMalloc+0x188>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006606:	4b13      	ldr	r3, [pc, #76]	@ (8006654 <pvPortMalloc+0x198>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3301      	adds	r3, #1
 800660c:	4a11      	ldr	r2, [pc, #68]	@ (8006654 <pvPortMalloc+0x198>)
 800660e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006610:	f7fe fcf0 	bl	8004ff4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00b      	beq.n	8006636 <pvPortMalloc+0x17a>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	60fb      	str	r3, [r7, #12]
}
 8006630:	bf00      	nop
 8006632:	bf00      	nop
 8006634:	e7fd      	b.n	8006632 <pvPortMalloc+0x176>
	return pvReturn;
 8006636:	69fb      	ldr	r3, [r7, #28]
}
 8006638:	4618      	mov	r0, r3
 800663a:	3728      	adds	r7, #40	@ 0x28
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	20001ab8 	.word	0x20001ab8
 8006644:	20001acc 	.word	0x20001acc
 8006648:	20001abc 	.word	0x20001abc
 800664c:	20001ab0 	.word	0x20001ab0
 8006650:	20001ac0 	.word	0x20001ac0
 8006654:	20001ac4 	.word	0x20001ac4

08006658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d04f      	beq.n	800670a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800666a:	2308      	movs	r3, #8
 800666c:	425b      	negs	r3, r3
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4413      	add	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	4b25      	ldr	r3, [pc, #148]	@ (8006714 <vPortFree+0xbc>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4013      	ands	r3, r2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10b      	bne.n	800669e <vPortFree+0x46>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	60fb      	str	r3, [r7, #12]
}
 8006698:	bf00      	nop
 800669a:	bf00      	nop
 800669c:	e7fd      	b.n	800669a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <vPortFree+0x66>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	60bb      	str	r3, [r7, #8]
}
 80066b8:	bf00      	nop
 80066ba:	bf00      	nop
 80066bc:	e7fd      	b.n	80066ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	4b14      	ldr	r3, [pc, #80]	@ (8006714 <vPortFree+0xbc>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4013      	ands	r3, r2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01e      	beq.n	800670a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d11a      	bne.n	800670a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006714 <vPortFree+0xbc>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	43db      	mvns	r3, r3
 80066de:	401a      	ands	r2, r3
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066e4:	f7fe fc78 	bl	8004fd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006718 <vPortFree+0xc0>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4413      	add	r3, r2
 80066f2:	4a09      	ldr	r2, [pc, #36]	@ (8006718 <vPortFree+0xc0>)
 80066f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066f6:	6938      	ldr	r0, [r7, #16]
 80066f8:	f000 f874 	bl	80067e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80066fc:	4b07      	ldr	r3, [pc, #28]	@ (800671c <vPortFree+0xc4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3301      	adds	r3, #1
 8006702:	4a06      	ldr	r2, [pc, #24]	@ (800671c <vPortFree+0xc4>)
 8006704:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006706:	f7fe fc75 	bl	8004ff4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800670a:	bf00      	nop
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20001acc 	.word	0x20001acc
 8006718:	20001abc 	.word	0x20001abc
 800671c:	20001ac8 	.word	0x20001ac8

08006720 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006726:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800672a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800672c:	4b27      	ldr	r3, [pc, #156]	@ (80067cc <prvHeapInit+0xac>)
 800672e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00c      	beq.n	8006754 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3307      	adds	r3, #7
 800673e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0307 	bic.w	r3, r3, #7
 8006746:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	4a1f      	ldr	r2, [pc, #124]	@ (80067cc <prvHeapInit+0xac>)
 8006750:	4413      	add	r3, r2
 8006752:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006758:	4a1d      	ldr	r2, [pc, #116]	@ (80067d0 <prvHeapInit+0xb0>)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800675e:	4b1c      	ldr	r3, [pc, #112]	@ (80067d0 <prvHeapInit+0xb0>)
 8006760:	2200      	movs	r2, #0
 8006762:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	4413      	add	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800676c:	2208      	movs	r2, #8
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	1a9b      	subs	r3, r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 0307 	bic.w	r3, r3, #7
 800677a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4a15      	ldr	r2, [pc, #84]	@ (80067d4 <prvHeapInit+0xb4>)
 8006780:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006782:	4b14      	ldr	r3, [pc, #80]	@ (80067d4 <prvHeapInit+0xb4>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2200      	movs	r2, #0
 8006788:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800678a:	4b12      	ldr	r3, [pc, #72]	@ (80067d4 <prvHeapInit+0xb4>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	1ad2      	subs	r2, r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067a0:	4b0c      	ldr	r3, [pc, #48]	@ (80067d4 <prvHeapInit+0xb4>)
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	4a0a      	ldr	r2, [pc, #40]	@ (80067d8 <prvHeapInit+0xb8>)
 80067ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4a09      	ldr	r2, [pc, #36]	@ (80067dc <prvHeapInit+0xbc>)
 80067b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067b8:	4b09      	ldr	r3, [pc, #36]	@ (80067e0 <prvHeapInit+0xc0>)
 80067ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80067be:	601a      	str	r2, [r3, #0]
}
 80067c0:	bf00      	nop
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	20000eb0 	.word	0x20000eb0
 80067d0:	20001ab0 	.word	0x20001ab0
 80067d4:	20001ab8 	.word	0x20001ab8
 80067d8:	20001ac0 	.word	0x20001ac0
 80067dc:	20001abc 	.word	0x20001abc
 80067e0:	20001acc 	.word	0x20001acc

080067e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067ec:	4b28      	ldr	r3, [pc, #160]	@ (8006890 <prvInsertBlockIntoFreeList+0xac>)
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	e002      	b.n	80067f8 <prvInsertBlockIntoFreeList+0x14>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d8f7      	bhi.n	80067f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	4413      	add	r3, r2
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	429a      	cmp	r2, r3
 8006812:	d108      	bne.n	8006826 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	441a      	add	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	441a      	add	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d118      	bne.n	800686c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	4b15      	ldr	r3, [pc, #84]	@ (8006894 <prvInsertBlockIntoFreeList+0xb0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d00d      	beq.n	8006862 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	441a      	add	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	e008      	b.n	8006874 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006862:	4b0c      	ldr	r3, [pc, #48]	@ (8006894 <prvInsertBlockIntoFreeList+0xb0>)
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	e003      	b.n	8006874 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	429a      	cmp	r2, r3
 800687a:	d002      	beq.n	8006882 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006882:	bf00      	nop
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	20001ab0 	.word	0x20001ab0
 8006894:	20001ab8 	.word	0x20001ab8

08006898 <memset>:
 8006898:	4402      	add	r2, r0
 800689a:	4603      	mov	r3, r0
 800689c:	4293      	cmp	r3, r2
 800689e:	d100      	bne.n	80068a2 <memset+0xa>
 80068a0:	4770      	bx	lr
 80068a2:	f803 1b01 	strb.w	r1, [r3], #1
 80068a6:	e7f9      	b.n	800689c <memset+0x4>

080068a8 <__libc_init_array>:
 80068a8:	b570      	push	{r4, r5, r6, lr}
 80068aa:	4d0d      	ldr	r5, [pc, #52]	@ (80068e0 <__libc_init_array+0x38>)
 80068ac:	4c0d      	ldr	r4, [pc, #52]	@ (80068e4 <__libc_init_array+0x3c>)
 80068ae:	1b64      	subs	r4, r4, r5
 80068b0:	10a4      	asrs	r4, r4, #2
 80068b2:	2600      	movs	r6, #0
 80068b4:	42a6      	cmp	r6, r4
 80068b6:	d109      	bne.n	80068cc <__libc_init_array+0x24>
 80068b8:	4d0b      	ldr	r5, [pc, #44]	@ (80068e8 <__libc_init_array+0x40>)
 80068ba:	4c0c      	ldr	r4, [pc, #48]	@ (80068ec <__libc_init_array+0x44>)
 80068bc:	f000 f826 	bl	800690c <_init>
 80068c0:	1b64      	subs	r4, r4, r5
 80068c2:	10a4      	asrs	r4, r4, #2
 80068c4:	2600      	movs	r6, #0
 80068c6:	42a6      	cmp	r6, r4
 80068c8:	d105      	bne.n	80068d6 <__libc_init_array+0x2e>
 80068ca:	bd70      	pop	{r4, r5, r6, pc}
 80068cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068d0:	4798      	blx	r3
 80068d2:	3601      	adds	r6, #1
 80068d4:	e7ee      	b.n	80068b4 <__libc_init_array+0xc>
 80068d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068da:	4798      	blx	r3
 80068dc:	3601      	adds	r6, #1
 80068de:	e7f2      	b.n	80068c6 <__libc_init_array+0x1e>
 80068e0:	08006a18 	.word	0x08006a18
 80068e4:	08006a18 	.word	0x08006a18
 80068e8:	08006a18 	.word	0x08006a18
 80068ec:	08006a1c 	.word	0x08006a1c

080068f0 <memcpy>:
 80068f0:	440a      	add	r2, r1
 80068f2:	4291      	cmp	r1, r2
 80068f4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80068f8:	d100      	bne.n	80068fc <memcpy+0xc>
 80068fa:	4770      	bx	lr
 80068fc:	b510      	push	{r4, lr}
 80068fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006902:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006906:	4291      	cmp	r1, r2
 8006908:	d1f9      	bne.n	80068fe <memcpy+0xe>
 800690a:	bd10      	pop	{r4, pc}

0800690c <_init>:
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690e:	bf00      	nop
 8006910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006912:	bc08      	pop	{r3}
 8006914:	469e      	mov	lr, r3
 8006916:	4770      	bx	lr

08006918 <_fini>:
 8006918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691a:	bf00      	nop
 800691c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691e:	bc08      	pop	{r3}
 8006920:	469e      	mov	lr, r3
 8006922:	4770      	bx	lr
